
project_of_usbdd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800885c  0800885c  0000985c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c4  080088c4  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080088c4  080088c4  000098c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088cc  080088cc  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088cc  080088cc  000098cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088d0  080088d0  000098d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080088d4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001ce0  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ddc  20001ddc  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013dba  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ab  00000000  00000000  0001dee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00021198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7c  00000000  00000000  00022348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ba9  00000000  00000000  000230c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155fd  00000000  00000000  00047c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9178  00000000  00000000  0005d26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001363e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a0c  00000000  00000000  00136428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0013ae34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008844 	.word	0x08008844

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008844 	.word	0x08008844

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f001 f889 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f845 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f9eb 	bl	80008a0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ca:	f000 fb55 	bl	8000b78 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004ce:	f000 f8a9 	bl	8000624 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004d2:	f000 f8f9 	bl	80006c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004d6:	f000 f997 	bl	8000808 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Start PWM
 80004da:	2100      	movs	r1, #0
 80004dc:	4818      	ldr	r0, [pc, #96]	@ (8000540 <main+0x88>)
 80004de:	f003 ff27 	bl	8004330 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80004e2:	4818      	ldr	r0, [pc, #96]	@ (8000544 <main+0x8c>)
 80004e4:	f001 f950 	bl	8001788 <HAL_ADC_Start>

	  //CDC_Receive_FS(Buff,Leng);
	  // Start ADC Conversion
	     if(receive_flag){
 80004e8:	4b17      	ldr	r3, [pc, #92]	@ (8000548 <main+0x90>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d01c      	beq.n	800052a <main+0x72>

	     // Wait for ADC Conversion to complete
	     if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80004f0:	210a      	movs	r1, #10
 80004f2:	4814      	ldr	r0, [pc, #80]	@ (8000544 <main+0x8c>)
 80004f4:	f001 fa4d 	bl	8001992 <HAL_ADC_PollForConversion>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d119      	bne.n	8000532 <main+0x7a>
	     {
	         // Read ADC Value (0-4095)
	         uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 80004fe:	4811      	ldr	r0, [pc, #68]	@ (8000544 <main+0x8c>)
 8000500:	f001 fad2 	bl	8001aa8 <HAL_ADC_GetValue>
 8000504:	6078      	str	r0, [r7, #4]

	         // Convert ADC value to PWM Duty Cycle (0-999)
	         uint32_t pwm_duty = (adc_val * 999) / 4095;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800050c:	fb03 f202 	mul.w	r2, r3, r2
 8000510:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <main+0x94>)
 8000512:	fba3 1302 	umull	r1, r3, r3, r2
 8000516:	1ad2      	subs	r2, r2, r3
 8000518:	0852      	lsrs	r2, r2, #1
 800051a:	4413      	add	r3, r2
 800051c:	0adb      	lsrs	r3, r3, #11
 800051e:	603b      	str	r3, [r7, #0]

	         // Set PWM duty cycle to control LED brightness
	         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 8000520:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <main+0x88>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	635a      	str	r2, [r3, #52]	@ 0x34
 8000528:	e003      	b.n	8000532 <main+0x7a>
	     }


	     }
	     else{
	    	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <main+0x88>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2200      	movs	r2, #0
 8000530:	635a      	str	r2, [r3, #52]	@ 0x34
	     }
	     HAL_ADC_Stop(&hadc1); // Stop ADC
 8000532:	4804      	ldr	r0, [pc, #16]	@ (8000544 <main+0x8c>)
 8000534:	f001 f9fa 	bl	800192c <HAL_ADC_Stop>

	     HAL_Delay(50); // Small delay for stability
 8000538:	2032      	movs	r0, #50	@ 0x32
 800053a:	f001 f8bd 	bl	80016b8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800053e:	e7d0      	b.n	80004e2 <main+0x2a>
 8000540:	20000160 	.word	0x20000160
 8000544:	20000118 	.word	0x20000118
 8000548:	200004cc 	.word	0x200004cc
 800054c:	00100101 	.word	0x00100101

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	@ 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	@ 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f008 f932 	bl	80087c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	@ (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	@ (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	@ 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	@ (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	@ (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c4:	23a8      	movs	r3, #168	@ 0xa8
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 f993 	bl	8003900 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f994 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fbf4 	bl	8003df0 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060e:	f000 f97d 	bl	800090c <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	@ 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	463b      	mov	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000636:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000638:	4a22      	ldr	r2, [pc, #136]	@ (80006c4 <MX_ADC1_Init+0xa0>)
 800063a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800063c:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 800063e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000642:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000644:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000668:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800066c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000676:	2201      	movs	r2, #1
 8000678:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 8000684:	2201      	movs	r2, #1
 8000686:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000688:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 800068a:	f001 f839 	bl	8001700 <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000694:	f000 f93a 	bl	800090c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_ADC1_Init+0x9c>)
 80006aa:	f001 fa0b 	bl	8001ac4 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006b4:	f000 f92a 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000118 	.word	0x20000118
 80006c4:	40012000 	.word	0x40012000

080006c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b096      	sub	sp, #88	@ 0x58
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2220      	movs	r2, #32
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f008 f861 	bl	80087c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000706:	4b3e      	ldr	r3, [pc, #248]	@ (8000800 <MX_TIM1_Init+0x138>)
 8000708:	4a3e      	ldr	r2, [pc, #248]	@ (8000804 <MX_TIM1_Init+0x13c>)
 800070a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800070c:	4b3c      	ldr	r3, [pc, #240]	@ (8000800 <MX_TIM1_Init+0x138>)
 800070e:	22a7      	movs	r2, #167	@ 0xa7
 8000710:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <MX_TIM1_Init+0x138>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000718:	4b39      	ldr	r3, [pc, #228]	@ (8000800 <MX_TIM1_Init+0x138>)
 800071a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800071e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <MX_TIM1_Init+0x138>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000726:	4b36      	ldr	r3, [pc, #216]	@ (8000800 <MX_TIM1_Init+0x138>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <MX_TIM1_Init+0x138>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000732:	4833      	ldr	r0, [pc, #204]	@ (8000800 <MX_TIM1_Init+0x138>)
 8000734:	f003 fd54 	bl	80041e0 <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800073e:	f000 f8e5 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000748:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800074c:	4619      	mov	r1, r3
 800074e:	482c      	ldr	r0, [pc, #176]	@ (8000800 <MX_TIM1_Init+0x138>)
 8000750:	f004 f868 	bl	8004824 <HAL_TIM_ConfigClockSource>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800075a:	f000 f8d7 	bl	800090c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800075e:	4828      	ldr	r0, [pc, #160]	@ (8000800 <MX_TIM1_Init+0x138>)
 8000760:	f003 fd8d 	bl	800427e <HAL_TIM_PWM_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800076a:	f000 f8cf 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000776:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800077a:	4619      	mov	r1, r3
 800077c:	4820      	ldr	r0, [pc, #128]	@ (8000800 <MX_TIM1_Init+0x138>)
 800077e:	f004 fc67 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000788:	f000 f8c0 	bl	800090c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078c:	2360      	movs	r3, #96	@ 0x60
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000798:	2300      	movs	r3, #0
 800079a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	4813      	ldr	r0, [pc, #76]	@ (8000800 <MX_TIM1_Init+0x138>)
 80007b2:	f003 ff75 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007bc:	f000 f8a6 	bl	800090c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	@ (8000800 <MX_TIM1_Init+0x138>)
 80007e4:	f004 fcb0 	bl	8005148 <HAL_TIMEx_ConfigBreakDeadTime>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80007ee:	f000 f88d 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007f2:	4803      	ldr	r0, [pc, #12]	@ (8000800 <MX_TIM1_Init+0x138>)
 80007f4:	f000 f938 	bl	8000a68 <HAL_TIM_MspPostInit>

}
 80007f8:	bf00      	nop
 80007fa:	3758      	adds	r7, #88	@ 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000160 	.word	0x20000160
 8000804:	40010000 	.word	0x40010000

08000808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_TIM2_Init+0x94>)
 8000826:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800082a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_TIM2_Init+0x94>)
 800082e:	2253      	movs	r2, #83	@ 0x53
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_TIM2_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_TIM2_Init+0x94>)
 800083a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800083e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_TIM2_Init+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_TIM2_Init+0x94>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084c:	4813      	ldr	r0, [pc, #76]	@ (800089c <MX_TIM2_Init+0x94>)
 800084e:	f003 fcc7 	bl	80041e0 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000858:	f000 f858 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4619      	mov	r1, r3
 8000868:	480c      	ldr	r0, [pc, #48]	@ (800089c <MX_TIM2_Init+0x94>)
 800086a:	f003 ffdb 	bl	8004824 <HAL_TIM_ConfigClockSource>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000874:	f000 f84a 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000878:	2320      	movs	r3, #32
 800087a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_TIM2_Init+0x94>)
 8000886:	f004 fbe3 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000890:	f000 f83c 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200001a8 	.word	0x200001a8

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_GPIO_Init+0x68>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <HAL_MspInit+0x4c>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092c:	6453      	str	r3, [r2, #68]	@ 0x44
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_MspInit+0x4c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <HAL_ADC_MspInit+0x7c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d127      	bne.n	80009da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a15      	ldr	r2, [pc, #84]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 8000994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <HAL_ADC_MspInit+0x80>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009c2:	2301      	movs	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c6:	2303      	movs	r3, #3
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <HAL_ADC_MspInit+0x84>)
 80009d6:	f001 fba5 	bl	8002124 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	@ 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40012000 	.word	0x40012000
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <HAL_TIM_Base_MspInit+0x70>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10e      	bne.n	8000a20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <HAL_TIM_Base_MspInit+0x74>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a16      	ldr	r2, [pc, #88]	@ (8000a64 <HAL_TIM_Base_MspInit+0x74>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <HAL_TIM_Base_MspInit+0x74>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a1e:	e01a      	b.n	8000a56 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a28:	d115      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <HAL_TIM_Base_MspInit+0x74>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a0c      	ldr	r2, [pc, #48]	@ (8000a64 <HAL_TIM_Base_MspInit+0x74>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_TIM_Base_MspInit+0x74>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	201c      	movs	r0, #28
 8000a4c:	f001 fb33 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a50:	201c      	movs	r0, #28
 8000a52:	f001 fb4c 	bl	80020ee <HAL_NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010000 	.word	0x40010000
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <HAL_TIM_MspPostInit+0x68>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d11e      	bne.n	8000ac8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <HAL_TIM_MspPostInit+0x6c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <HAL_TIM_MspPostInit+0x6c>)
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_TIM_MspPostInit+0x6c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <HAL_TIM_MspPostInit+0x70>)
 8000ac4:	f001 fb2e 	bl	8002124 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40010000 	.word	0x40010000
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 fda8 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <TIM2_IRQHandler+0x10>)
 8000b32:	f003 fcc5 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200001a8 	.word	0x200001a8

08000b40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <OTG_FS_IRQHandler+0x10>)
 8000b46:	f001 fdcd 	bl	80026e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200014d0 	.word	0x200014d0

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4912      	ldr	r1, [pc, #72]	@ (8000bc8 <MX_USB_DEVICE_Init+0x50>)
 8000b80:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <MX_USB_DEVICE_Init+0x54>)
 8000b82:	f006 fb1f 	bl	80071c4 <USBD_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000b8c:	f7ff febe 	bl	800090c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000b90:	490f      	ldr	r1, [pc, #60]	@ (8000bd0 <MX_USB_DEVICE_Init+0x58>)
 8000b92:	480e      	ldr	r0, [pc, #56]	@ (8000bcc <MX_USB_DEVICE_Init+0x54>)
 8000b94:	f006 fb46 	bl	8007224 <USBD_RegisterClass>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000b9e:	f7ff feb5 	bl	800090c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000ba2:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <MX_USB_DEVICE_Init+0x5c>)
 8000ba4:	4809      	ldr	r0, [pc, #36]	@ (8000bcc <MX_USB_DEVICE_Init+0x54>)
 8000ba6:	f006 fa7d 	bl	80070a4 <USBD_CDC_RegisterInterface>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000bb0:	f7ff feac 	bl	800090c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_USB_DEVICE_Init+0x54>)
 8000bb6:	f006 fb6b 	bl	8007290 <USBD_Start>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000bc0:	f7ff fea4 	bl	800090c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000018 	.word	0x20000018
 8000bcc:	200001f0 	.word	0x200001f0
 8000bd0:	2000007c 	.word	0x2000007c
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4905      	ldr	r1, [pc, #20]	@ (8000bf4 <CDC_Init_FS+0x1c>)
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <CDC_Init_FS+0x20>)
 8000be2:	f006 fa79 	bl	80070d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000be6:	4905      	ldr	r1, [pc, #20]	@ (8000bfc <CDC_Init_FS+0x24>)
 8000be8:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <CDC_Init_FS+0x20>)
 8000bea:	f006 fa97 	bl	800711c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000bee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000cd0 	.word	0x20000cd0
 8000bf8:	200001f0 	.word	0x200001f0
 8000bfc:	200004d0 	.word	0x200004d0

08000c00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000c04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b23      	cmp	r3, #35	@ 0x23
 8000c24:	d84a      	bhi.n	8000cbc <CDC_Control_FS+0xac>
 8000c26:	a201      	add	r2, pc, #4	@ (adr r2, 8000c2c <CDC_Control_FS+0x1c>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000cbd 	.word	0x08000cbd
 8000c30:	08000cbd 	.word	0x08000cbd
 8000c34:	08000cbd 	.word	0x08000cbd
 8000c38:	08000cbd 	.word	0x08000cbd
 8000c3c:	08000cbd 	.word	0x08000cbd
 8000c40:	08000cbd 	.word	0x08000cbd
 8000c44:	08000cbd 	.word	0x08000cbd
 8000c48:	08000cbd 	.word	0x08000cbd
 8000c4c:	08000cbd 	.word	0x08000cbd
 8000c50:	08000cbd 	.word	0x08000cbd
 8000c54:	08000cbd 	.word	0x08000cbd
 8000c58:	08000cbd 	.word	0x08000cbd
 8000c5c:	08000cbd 	.word	0x08000cbd
 8000c60:	08000cbd 	.word	0x08000cbd
 8000c64:	08000cbd 	.word	0x08000cbd
 8000c68:	08000cbd 	.word	0x08000cbd
 8000c6c:	08000cbd 	.word	0x08000cbd
 8000c70:	08000cbd 	.word	0x08000cbd
 8000c74:	08000cbd 	.word	0x08000cbd
 8000c78:	08000cbd 	.word	0x08000cbd
 8000c7c:	08000cbd 	.word	0x08000cbd
 8000c80:	08000cbd 	.word	0x08000cbd
 8000c84:	08000cbd 	.word	0x08000cbd
 8000c88:	08000cbd 	.word	0x08000cbd
 8000c8c:	08000cbd 	.word	0x08000cbd
 8000c90:	08000cbd 	.word	0x08000cbd
 8000c94:	08000cbd 	.word	0x08000cbd
 8000c98:	08000cbd 	.word	0x08000cbd
 8000c9c:	08000cbd 	.word	0x08000cbd
 8000ca0:	08000cbd 	.word	0x08000cbd
 8000ca4:	08000cbd 	.word	0x08000cbd
 8000ca8:	08000cbd 	.word	0x08000cbd
 8000cac:	08000cbd 	.word	0x08000cbd
 8000cb0:	08000cbd 	.word	0x08000cbd
 8000cb4:	08000cbd 	.word	0x08000cbd
 8000cb8:	08000cbd 	.word	0x08000cbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000cbc:	bf00      	nop
  }

  return (USBD_OK);
 8000cbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS,&Buf[0]);
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4812      	ldr	r0, [pc, #72]	@ (8000d24 <CDC_Receive_FS+0x58>)
 8000cda:	f006 fa1f 	bl	800711c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000cde:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <CDC_Receive_FS+0x58>)
 8000ce0:	f006 fa3a 	bl	8007158 <USBD_CDC_ReceivePacket>
	    if (strncmp((char*)Buf, "LED_ON", *Len) == 0) {
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	490f      	ldr	r1, [pc, #60]	@ (8000d28 <CDC_Receive_FS+0x5c>)
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f007 fd73 	bl	80087d8 <strncmp>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d103      	bne.n	8000d00 <CDC_Receive_FS+0x34>
	        receive_flag=1;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <CDC_Receive_FS+0x60>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e00c      	b.n	8000d1a <CDC_Receive_FS+0x4e>
	    } else if (strncmp((char*)Buf, "LED_OFF", *Len) == 0) {
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	490a      	ldr	r1, [pc, #40]	@ (8000d30 <CDC_Receive_FS+0x64>)
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f007 fd65 	bl	80087d8 <strncmp>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <CDC_Receive_FS+0x4e>
	        receive_flag=0;
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <CDC_Receive_FS+0x60>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	    }

	    return (USBD_OK);
 8000d1a:	2300      	movs	r3, #0



  /* USER CODE END 6 */
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200001f0 	.word	0x200001f0
 8000d28:	0800885c 	.word	0x0800885c
 8000d2c:	200004cc 	.word	0x200004cc
 8000d30:	08008864 	.word	0x08008864

08000d34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d78:	d13a      	bne.n	8000df0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <HAL_PCD_MspInit+0xa0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a1d      	ldr	r2, [pc, #116]	@ (8000df8 <HAL_PCD_MspInit+0xa0>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <HAL_PCD_MspInit+0xa0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d96:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da8:	230a      	movs	r3, #10
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4812      	ldr	r0, [pc, #72]	@ (8000dfc <HAL_PCD_MspInit+0xa4>)
 8000db4:	f001 f9b6 	bl	8002124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_PCD_MspInit+0xa0>)
 8000dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <HAL_PCD_MspInit+0xa0>)
 8000dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <HAL_PCD_MspInit+0xa0>)
 8000dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_PCD_MspInit+0xa0>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_PCD_MspInit+0xa0>)
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2043      	movs	r0, #67	@ 0x43
 8000de6:	f001 f966 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000dea:	2043      	movs	r0, #67	@ 0x43
 8000dec:	f001 f97f 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	@ 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000e14:	4619      	mov	r1, r3
 8000e16:	4610      	mov	r0, r2
 8000e18:	f006 fa87 	bl	800732a <USBD_LL_SetupStage>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f006 fac1 	bl	80073d4 <USBD_LL_DataOutStage>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8000e6c:	78fa      	ldrb	r2, [r7, #3]
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	3320      	adds	r3, #32
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f006 fb5a 	bl	800753a <USBD_LL_DataInStage>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 fc94 	bl	80077ca <USBD_LL_SOF>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	79db      	ldrb	r3, [r3, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e008      	b.n	8000ed6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	79db      	ldrb	r3, [r3, #7]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d102      	bne.n	8000ed2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e001      	b.n	8000ed6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8000ed2:	f7ff fd1b 	bl	800090c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 fc2e 	bl	8007742 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fbd6 	bl	800769e <USBD_LL_Reset>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fc29 	bl	8007762 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7adb      	ldrb	r3, [r3, #11]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <HAL_PCD_SuspendCallback+0x48>)
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	4a03      	ldr	r2, [pc, #12]	@ (8000f44 <HAL_PCD_SuspendCallback+0x48>)
 8000f36:	f043 0306 	orr.w	r3, r3, #6
 8000f3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 fc1f 	bl	800779a <USBD_LL_Resume>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 fc77 	bl	800786e <USBD_LL_IsoOUTIncomplete>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f006 fc33 	bl	800780a <USBD_LL_IsoINIncomplete>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f006 fc89 	bl	80078d2 <USBD_LL_DevConnected>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 fc86 	bl	80078e8 <USBD_LL_DevDisconnected>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d13c      	bne.n	800106e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000ff4:	4a20      	ldr	r2, [pc, #128]	@ (8001078 <USBD_LL_Init+0x94>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <USBD_LL_Init+0x94>)
 8001000:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001004:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <USBD_LL_Init+0x94>)
 8001006:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800100a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800100c:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <USBD_LL_Init+0x94>)
 800100e:	2204      	movs	r2, #4
 8001010:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <USBD_LL_Init+0x94>)
 8001014:	2202      	movs	r2, #2
 8001016:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <USBD_LL_Init+0x94>)
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <USBD_LL_Init+0x94>)
 8001020:	2202      	movs	r2, #2
 8001022:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <USBD_LL_Init+0x94>)
 8001026:	2200      	movs	r2, #0
 8001028:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <USBD_LL_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <USBD_LL_Init+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <USBD_LL_Init+0x94>)
 8001038:	2200      	movs	r2, #0
 800103a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <USBD_LL_Init+0x94>)
 800103e:	2200      	movs	r2, #0
 8001040:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001042:	480d      	ldr	r0, [pc, #52]	@ (8001078 <USBD_LL_Init+0x94>)
 8001044:	f001 fa0a 	bl	800245c <HAL_PCD_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800104e:	f7ff fc5d 	bl	800090c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8001052:	2180      	movs	r1, #128	@ 0x80
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <USBD_LL_Init+0x94>)
 8001056:	f002 fc36 	bl	80038c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800105a:	2240      	movs	r2, #64	@ 0x40
 800105c:	2100      	movs	r1, #0
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <USBD_LL_Init+0x94>)
 8001060:	f002 fbea 	bl	8003838 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001064:	2280      	movs	r2, #128	@ 0x80
 8001066:	2101      	movs	r1, #1
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <USBD_LL_Init+0x94>)
 800106a:	f002 fbe5 	bl	8003838 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200014d0 	.word	0x200014d0

0800107c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001092:	4618      	mov	r0, r3
 8001094:	f001 faf1 	bl	800267a <HAL_PCD_Start>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f942 	bl	8001328 <USBD_Get_USB_Status>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	4608      	mov	r0, r1
 80010bc:	4611      	mov	r1, r2
 80010be:	461a      	mov	r2, r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	70fb      	strb	r3, [r7, #3]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70bb      	strb	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80010da:	78bb      	ldrb	r3, [r7, #2]
 80010dc:	883a      	ldrh	r2, [r7, #0]
 80010de:	78f9      	ldrb	r1, [r7, #3]
 80010e0:	f001 ffc5 	bl	800306e <HAL_PCD_EP_Open>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f91c 	bl	8001328 <USBD_Get_USB_Status>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001118:	78fa      	ldrb	r2, [r7, #3]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f810 	bl	8003142 <HAL_PCD_EP_Close>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f8fd 	bl	8001328 <USBD_Get_USB_Status>
 800112e:	4603      	mov	r3, r0
 8001130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001132:	7bbb      	ldrb	r3, [r7, #14]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001156:	78fa      	ldrb	r2, [r7, #3]
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f002 f8c8 	bl	80032f0 <HAL_PCD_EP_SetStall>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f8de 	bl	8001328 <USBD_Get_USB_Status>
 800116c:	4603      	mov	r3, r0
 800116e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001170:	7bbb      	ldrb	r3, [r7, #14]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001194:	78fa      	ldrb	r2, [r7, #3]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f002 f90c 	bl	80033b6 <HAL_PCD_EP_ClrStall>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f8bf 	bl	8001328 <USBD_Get_USB_Status>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80011ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80011cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da0b      	bge.n	80011ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80011da:	68f9      	ldr	r1, [r7, #12]
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	3316      	adds	r3, #22
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	e00b      	b.n	8001204 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80011f2:	68f9      	ldr	r1, [r7, #12]
 80011f4:	4613      	mov	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8001202:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fef9 	bl	8003026 <HAL_PCD_SetAddress>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f874 	bl	8001328 <USBD_Get_USB_Status>
 8001240:	4603      	mov	r3, r0
 8001242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001244:	7bbb      	ldrb	r3, [r7, #14]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	460b      	mov	r3, r1
 800125c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800126c:	7af9      	ldrb	r1, [r7, #11]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	f002 f803 	bl	800327c <HAL_PCD_EP_Transmit>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f853 	bl	8001328 <USBD_Get_USB_Status>
 8001282:	4603      	mov	r3, r0
 8001284:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001286:	7dbb      	ldrb	r3, [r7, #22]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	460b      	mov	r3, r1
 800129e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80012ae:	7af9      	ldrb	r1, [r7, #11]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	f001 ff8f 	bl	80031d6 <HAL_PCD_EP_Receive>
 80012b8:	4603      	mov	r3, r0
 80012ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f832 	bl	8001328 <USBD_Get_USB_Status>
 80012c4:	4603      	mov	r3, r0
 80012c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80012c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80012e4:	78fa      	ldrb	r2, [r7, #3]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 ffaf 	bl	800324c <HAL_PCD_EP_GetRxCount>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <USBD_static_malloc+0x18>)
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200019b4 	.word	0x200019b4

08001314 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d817      	bhi.n	800136c <USBD_Get_USB_Status+0x44>
 800133c:	a201      	add	r2, pc, #4	@ (adr r2, 8001344 <USBD_Get_USB_Status+0x1c>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001355 	.word	0x08001355
 8001348:	0800135b 	.word	0x0800135b
 800134c:	08001361 	.word	0x08001361
 8001350:	08001367 	.word	0x08001367
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
    break;
 8001358:	e00b      	b.n	8001372 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800135a:	2303      	movs	r3, #3
 800135c:	73fb      	strb	r3, [r7, #15]
    break;
 800135e:	e008      	b.n	8001372 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    break;
 8001364:	e005      	b.n	8001372 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001366:	2303      	movs	r3, #3
 8001368:	73fb      	strb	r3, [r7, #15]
    break;
 800136a:	e002      	b.n	8001372 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800136c:	2303      	movs	r3, #3
 800136e:	73fb      	strb	r3, [r7, #15]
    break;
 8001370:	bf00      	nop
  }
  return usb_status;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2212      	movs	r2, #18
 8001390:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001392:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	20000034 	.word	0x20000034

080013a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2204      	movs	r2, #4
 80013b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80013b6:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20000048 	.word	0x20000048

080013c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d105      	bne.n	80013e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	4907      	ldr	r1, [pc, #28]	@ (80013fc <USBD_FS_ProductStrDescriptor+0x34>)
 80013de:	4808      	ldr	r0, [pc, #32]	@ (8001400 <USBD_FS_ProductStrDescriptor+0x38>)
 80013e0:	f007 f906 	bl	80085f0 <USBD_GetString>
 80013e4:	e004      	b.n	80013f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4904      	ldr	r1, [pc, #16]	@ (80013fc <USBD_FS_ProductStrDescriptor+0x34>)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <USBD_FS_ProductStrDescriptor+0x38>)
 80013ec:	f007 f900 	bl	80085f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80013f0:	4b02      	ldr	r3, [pc, #8]	@ (80013fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20001bd4 	.word	0x20001bd4
 8001400:	0800886c 	.word	0x0800886c

08001404 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	4904      	ldr	r1, [pc, #16]	@ (8001424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8001416:	f007 f8eb 	bl	80085f0 <USBD_GetString>
  return USBD_StrDesc;
 800141a:	4b02      	ldr	r3, [pc, #8]	@ (8001424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20001bd4 	.word	0x20001bd4
 8001428:	08008884 	.word	0x08008884

0800142c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	221a      	movs	r2, #26
 800143c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800143e:	f000 f843 	bl	80014c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8001442:	4b02      	ldr	r3, [pc, #8]	@ (800144c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000004c 	.word	0x2000004c

08001450 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4907      	ldr	r1, [pc, #28]	@ (8001484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001466:	4808      	ldr	r0, [pc, #32]	@ (8001488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8001468:	f007 f8c2 	bl	80085f0 <USBD_GetString>
 800146c:	e004      	b.n	8001478 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4904      	ldr	r1, [pc, #16]	@ (8001484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8001474:	f007 f8bc 	bl	80085f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001478:	4b02      	ldr	r3, [pc, #8]	@ (8001484 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20001bd4 	.word	0x20001bd4
 8001488:	08008898 	.word	0x08008898

0800148c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	4907      	ldr	r1, [pc, #28]	@ (80014c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80014a2:	4808      	ldr	r0, [pc, #32]	@ (80014c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80014a4:	f007 f8a4 	bl	80085f0 <USBD_GetString>
 80014a8:	e004      	b.n	80014b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	4904      	ldr	r1, [pc, #16]	@ (80014c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80014b0:	f007 f89e 	bl	80085f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80014b4:	4b02      	ldr	r3, [pc, #8]	@ (80014c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20001bd4 	.word	0x20001bd4
 80014c4:	080088a4 	.word	0x080088a4

080014c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d009      	beq.n	80014f0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80014dc:	2208      	movs	r2, #8
 80014de:	4906      	ldr	r1, [pc, #24]	@ (80014f8 <Get_SerialNum+0x30>)
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 f80d 	bl	8001500 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80014e6:	2204      	movs	r2, #4
 80014e8:	4904      	ldr	r1, [pc, #16]	@ (80014fc <Get_SerialNum+0x34>)
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f808 	bl	8001500 <IntToUnicode>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000004e 	.word	0x2000004e
 80014fc:	2000005e 	.word	0x2000005e

08001500 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	4613      	mov	r3, r2
 800150c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
 8001516:	e027      	b.n	8001568 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	0f1b      	lsrs	r3, r3, #28
 800151c:	2b09      	cmp	r3, #9
 800151e:	d80b      	bhi.n	8001538 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	0f1b      	lsrs	r3, r3, #28
 8001524:	b2da      	uxtb	r2, r3
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4619      	mov	r1, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	440b      	add	r3, r1
 8001530:	3230      	adds	r2, #48	@ 0x30
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e00a      	b.n	800154e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	0f1b      	lsrs	r3, r3, #28
 800153c:	b2da      	uxtb	r2, r3
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4619      	mov	r1, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	440b      	add	r3, r1
 8001548:	3237      	adds	r2, #55	@ 0x37
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	3301      	adds	r3, #1
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4413      	add	r3, r2
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	3301      	adds	r3, #1
 8001566:	75fb      	strb	r3, [r7, #23]
 8001568:	7dfa      	ldrb	r2, [r7, #23]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	429a      	cmp	r2, r3
 800156e:	d3d3      	bcc.n	8001518 <IntToUnicode+0x18>
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001584:	f7ff fae6 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	@ (80015cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f007 f925 	bl	80087fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7fe ff81 	bl	80004b8 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80015c4:	080088d4 	.word	0x080088d4
  ldr r2, =_sbss
 80015c8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80015cc:	20001ddc 	.word	0x20001ddc

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <HAL_Init+0x40>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <HAL_Init+0x40>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_Init+0x40>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 fd4f 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff f986 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fd67 	bl	800210a <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001654:	f000 fd2f 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	@ (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	2000006c 	.word	0x2000006c
 8001674:	20000068 	.word	0x20000068

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	2000006c 	.word	0x2000006c
 800169c:	20001dd4 	.word	0x20001dd4

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20001dd4 	.word	0x20001dd4

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000006c 	.word	0x2000006c

08001700 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e033      	b.n	800177e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff f922 	bl	8000968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d118      	bne.n	8001770 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001746:	f023 0302 	bic.w	r3, r3, #2
 800174a:	f043 0202 	orr.w	r2, r3, #2
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fad8 	bl	8001d08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f023 0303 	bic.w	r3, r3, #3
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	@ 0x40
 800176e:	e001      	b.n	8001774 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_Start+0x1a>
 800179e:	2302      	movs	r3, #2
 80017a0:	e0b2      	b.n	8001908 <HAL_ADC_Start+0x180>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d018      	beq.n	80017ea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c8:	4b52      	ldr	r3, [pc, #328]	@ (8001914 <HAL_ADC_Start+0x18c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a52      	ldr	r2, [pc, #328]	@ (8001918 <HAL_ADC_Start+0x190>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9a      	lsrs	r2, r3, #18
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017dc:	e002      	b.n	80017e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f9      	bne.n	80017de <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d17a      	bne.n	80018ee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001822:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001836:	d106      	bne.n	8001846 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183c:	f023 0206 	bic.w	r2, r3, #6
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	645a      	str	r2, [r3, #68]	@ 0x44
 8001844:	e002      	b.n	800184c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001854:	4b31      	ldr	r3, [pc, #196]	@ (800191c <HAL_ADC_Start+0x194>)
 8001856:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001860:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	2b00      	cmp	r3, #0
 800186c:	d12a      	bne.n	80018c4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2b      	ldr	r2, [pc, #172]	@ (8001920 <HAL_ADC_Start+0x198>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d015      	beq.n	80018a4 <HAL_ADC_Start+0x11c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a29      	ldr	r2, [pc, #164]	@ (8001924 <HAL_ADC_Start+0x19c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d105      	bne.n	800188e <HAL_ADC_Start+0x106>
 8001882:	4b26      	ldr	r3, [pc, #152]	@ (800191c <HAL_ADC_Start+0x194>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a25      	ldr	r2, [pc, #148]	@ (8001928 <HAL_ADC_Start+0x1a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d136      	bne.n	8001906 <HAL_ADC_Start+0x17e>
 8001898:	4b20      	ldr	r3, [pc, #128]	@ (800191c <HAL_ADC_Start+0x194>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d130      	bne.n	8001906 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d129      	bne.n	8001906 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	e020      	b.n	8001906 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a15      	ldr	r2, [pc, #84]	@ (8001920 <HAL_ADC_Start+0x198>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d11b      	bne.n	8001906 <HAL_ADC_Start+0x17e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d114      	bne.n	8001906 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e00b      	b.n	8001906 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f043 0210 	orr.w	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	20000000 	.word	0x20000000
 8001918:	431bde83 	.word	0x431bde83
 800191c:	40012300 	.word	0x40012300
 8001920:	40012000 	.word	0x40012000
 8001924:	40012100 	.word	0x40012100
 8001928:	40012200 	.word	0x40012200

0800192c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Stop+0x16>
 800193e:	2302      	movs	r3, #2
 8001940:	e021      	b.n	8001986 <HAL_ADC_Stop+0x5a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ae:	d113      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019be:	d10b      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e063      	b.n	8001aa0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d8:	f7ff fe62 	bl	80016a0 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019de:	e021      	b.n	8001a24 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019e6:	d01d      	beq.n	8001a24 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <HAL_ADC_PollForConversion+0x6c>
 80019ee:	f7ff fe57 	bl	80016a0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d212      	bcs.n	8001a24 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d00b      	beq.n	8001a24 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	f043 0204 	orr.w	r2, r3, #4
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e03d      	b.n	8001aa0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d1d6      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f06f 0212 	mvn.w	r2, #18
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d123      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d11f      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d111      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1c>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e105      	b.n	8001cec <HAL_ADC_ConfigChannel+0x228>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	d925      	bls.n	8001b3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68d9      	ldr	r1, [r3, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	3b1e      	subs	r3, #30
 8001b06:	2207      	movs	r2, #7
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	400a      	ands	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68d9      	ldr	r1, [r3, #12]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	4603      	mov	r3, r0
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4403      	add	r3, r0
 8001b2e:	3b1e      	subs	r3, #30
 8001b30:	409a      	lsls	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	e022      	b.n	8001b82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6919      	ldr	r1, [r3, #16]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	2207      	movs	r2, #7
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6919      	ldr	r1, [r3, #16]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4618      	mov	r0, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4403      	add	r3, r0
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d824      	bhi.n	8001bd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b05      	subs	r3, #5
 8001b9c:	221f      	movs	r2, #31
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	400a      	ands	r2, r1
 8001baa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b05      	subs	r3, #5
 8001bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bd2:	e04c      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d824      	bhi.n	8001c26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3b23      	subs	r3, #35	@ 0x23
 8001bee:	221f      	movs	r2, #31
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43da      	mvns	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	3b23      	subs	r3, #35	@ 0x23
 8001c18:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c24:	e023      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b41      	subs	r3, #65	@ 0x41
 8001c38:	221f      	movs	r2, #31
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	400a      	ands	r2, r1
 8001c46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b41      	subs	r3, #65	@ 0x41
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6e:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x234>)
 8001c70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a21      	ldr	r2, [pc, #132]	@ (8001cfc <HAL_ADC_ConfigChannel+0x238>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d109      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1cc>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b12      	cmp	r3, #18
 8001c82:	d105      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	@ (8001cfc <HAL_ADC_ConfigChannel+0x238>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d123      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x21e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d003      	beq.n	8001caa <HAL_ADC_ConfigChannel+0x1e6>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b11      	cmp	r3, #17
 8001ca8:	d11b      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d111      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_ADC_ConfigChannel+0x23c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a10      	ldr	r2, [pc, #64]	@ (8001d04 <HAL_ADC_ConfigChannel+0x240>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	0c9a      	lsrs	r2, r3, #18
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40012300 	.word	0x40012300
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	20000000 	.word	0x20000000
 8001d04:	431bde83 	.word	0x431bde83

08001d08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d10:	4b79      	ldr	r3, [pc, #484]	@ (8001ef8 <ADC_Init+0x1f0>)
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6899      	ldr	r1, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9a:	4a58      	ldr	r2, [pc, #352]	@ (8001efc <ADC_Init+0x1f4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6899      	ldr	r1, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	e00f      	b.n	8001e06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e04:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0202 	bic.w	r2, r2, #2
 8001e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6899      	ldr	r1, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7e1b      	ldrb	r3, [r3, #24]
 8001e20:	005a      	lsls	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e42:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6859      	ldr	r1, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	035a      	lsls	r2, r3, #13
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	e007      	b.n	8001e7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	051a      	lsls	r2, r3, #20
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6899      	ldr	r1, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ebe:	025a      	lsls	r2, r3, #9
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	029a      	lsls	r2, r3, #10
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40012300 	.word	0x40012300
 8001efc:	0f000001 	.word	0x0f000001

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	@ (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	@ (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	@ (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	@ 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	@ 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002080:	f7ff ff8e 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	@ (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff29 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff3e 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff8e 	bl	8001ff4 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5d 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff31 	bl	8001f64 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	@ 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e16b      	b.n	8002418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	429a      	cmp	r2, r3
 800215a:	f040 815a 	bne.w	8002412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d005      	beq.n	8002176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002172:	2b02      	cmp	r3, #2
 8002174:	d130      	bne.n	80021d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 0201 	and.w	r2, r3, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d017      	beq.n	8002214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d123      	bne.n	8002268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	08da      	lsrs	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80b4 	beq.w	8002412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b60      	ldr	r3, [pc, #384]	@ (8002430 <HAL_GPIO_Init+0x30c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002430 <HAL_GPIO_Init+0x30c>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002430 <HAL_GPIO_Init+0x30c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002434 <HAL_GPIO_Init+0x310>)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	3302      	adds	r3, #2
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a52      	ldr	r2, [pc, #328]	@ (8002438 <HAL_GPIO_Init+0x314>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d02b      	beq.n	800234a <HAL_GPIO_Init+0x226>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a51      	ldr	r2, [pc, #324]	@ (800243c <HAL_GPIO_Init+0x318>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d025      	beq.n	8002346 <HAL_GPIO_Init+0x222>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a50      	ldr	r2, [pc, #320]	@ (8002440 <HAL_GPIO_Init+0x31c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01f      	beq.n	8002342 <HAL_GPIO_Init+0x21e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4f      	ldr	r2, [pc, #316]	@ (8002444 <HAL_GPIO_Init+0x320>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d019      	beq.n	800233e <HAL_GPIO_Init+0x21a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4e      	ldr	r2, [pc, #312]	@ (8002448 <HAL_GPIO_Init+0x324>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_GPIO_Init+0x216>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4d      	ldr	r2, [pc, #308]	@ (800244c <HAL_GPIO_Init+0x328>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00d      	beq.n	8002336 <HAL_GPIO_Init+0x212>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <HAL_GPIO_Init+0x32c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <HAL_GPIO_Init+0x20e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4b      	ldr	r2, [pc, #300]	@ (8002454 <HAL_GPIO_Init+0x330>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d101      	bne.n	800232e <HAL_GPIO_Init+0x20a>
 800232a:	2307      	movs	r3, #7
 800232c:	e00e      	b.n	800234c <HAL_GPIO_Init+0x228>
 800232e:	2308      	movs	r3, #8
 8002330:	e00c      	b.n	800234c <HAL_GPIO_Init+0x228>
 8002332:	2306      	movs	r3, #6
 8002334:	e00a      	b.n	800234c <HAL_GPIO_Init+0x228>
 8002336:	2305      	movs	r3, #5
 8002338:	e008      	b.n	800234c <HAL_GPIO_Init+0x228>
 800233a:	2304      	movs	r3, #4
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x228>
 800233e:	2303      	movs	r3, #3
 8002340:	e004      	b.n	800234c <HAL_GPIO_Init+0x228>
 8002342:	2302      	movs	r3, #2
 8002344:	e002      	b.n	800234c <HAL_GPIO_Init+0x228>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_GPIO_Init+0x228>
 800234a:	2300      	movs	r3, #0
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	f002 0203 	and.w	r2, r2, #3
 8002352:	0092      	lsls	r2, r2, #2
 8002354:	4093      	lsls	r3, r2
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800235c:	4935      	ldr	r1, [pc, #212]	@ (8002434 <HAL_GPIO_Init+0x310>)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	3302      	adds	r3, #2
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236a:	4b3b      	ldr	r3, [pc, #236]	@ (8002458 <HAL_GPIO_Init+0x334>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800238e:	4a32      	ldr	r2, [pc, #200]	@ (8002458 <HAL_GPIO_Init+0x334>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002394:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <HAL_GPIO_Init+0x334>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b8:	4a27      	ldr	r2, [pc, #156]	@ (8002458 <HAL_GPIO_Init+0x334>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023be:	4b26      	ldr	r3, [pc, #152]	@ (8002458 <HAL_GPIO_Init+0x334>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002458 <HAL_GPIO_Init+0x334>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_GPIO_Init+0x334>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800240c:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <HAL_GPIO_Init+0x334>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3301      	adds	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	f67f ae90 	bls.w	8002140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3724      	adds	r7, #36	@ 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	40013800 	.word	0x40013800
 8002438:	40020000 	.word	0x40020000
 800243c:	40020400 	.word	0x40020400
 8002440:	40020800 	.word	0x40020800
 8002444:	40020c00 	.word	0x40020c00
 8002448:	40021000 	.word	0x40021000
 800244c:	40021400 	.word	0x40021400
 8002450:	40021800 	.word	0x40021800
 8002454:	40021c00 	.word	0x40021c00
 8002458:	40013c00 	.word	0x40013c00

0800245c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e101      	b.n	8002672 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d106      	bne.n	800248e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7fe fc65 	bl	8000d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800249c:	d102      	bne.n	80024a4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 ffca 	bl	8005442 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7c1a      	ldrb	r2, [r3, #16]
 80024b6:	f88d 2000 	strb.w	r2, [sp]
 80024ba:	3304      	adds	r3, #4
 80024bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024be:	f002 fea9 	bl	8005214 <USB_CoreInit>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0ce      	b.n	8002672 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 ffc2 	bl	8005464 <USB_SetCurrentMode>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0bf      	b.n	8002672 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e04a      	b.n	800258e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3315      	adds	r3, #21
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3314      	adds	r3, #20
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	b298      	uxth	r0, r3
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	332e      	adds	r3, #46	@ 0x2e
 8002534:	4602      	mov	r2, r0
 8002536:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3318      	adds	r3, #24
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	331c      	adds	r3, #28
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3320      	adds	r3, #32
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3324      	adds	r3, #36	@ 0x24
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	791b      	ldrb	r3, [r3, #4]
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	429a      	cmp	r2, r3
 8002596:	d3af      	bcc.n	80024f8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	e044      	b.n	8002628 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	3301      	adds	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	791b      	ldrb	r3, [r3, #4]
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	429a      	cmp	r2, r3
 8002630:	d3b5      	bcc.n	800259e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	7c1a      	ldrb	r2, [r3, #16]
 800263a:	f88d 2000 	strb.w	r2, [sp]
 800263e:	3304      	adds	r3, #4
 8002640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002642:	f002 ff5b 	bl	80054fc <USB_DevInit>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e00c      	b.n	8002672 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 ffa5 	bl	80065ba <USB_DevDisconnect>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_PCD_Start+0x1c>
 8002692:	2302      	movs	r3, #2
 8002694:	e022      	b.n	80026dc <HAL_PCD_Start+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d105      	bne.n	80026be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 feac 	bl	8005420 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 ff53 	bl	8006578 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b08d      	sub	sp, #52	@ 0x34
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 f811 	bl	8006722 <USB_GetMode>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 848c 	bne.w	8003020 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 ff75 	bl	80065fc <USB_ReadInterrupts>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8482 	beq.w	800301e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f003 ff62 	bl	80065fc <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d107      	bne.n	8002752 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f002 0202 	and.w	r2, r2, #2
 8002750:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 ff50 	bl	80065fc <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d161      	bne.n	800282a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0210 	bic.w	r2, r2, #16
 8002774:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f003 020f 	and.w	r2, r3, #15
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	3304      	adds	r3, #4
 8002794:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	0c5b      	lsrs	r3, r3, #17
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d124      	bne.n	80027ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d035      	beq.n	800281a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	6a38      	ldr	r0, [r7, #32]
 80027c2:	f003 fd87 	bl	80062d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d2:	441a      	add	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e4:	441a      	add	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	615a      	str	r2, [r3, #20]
 80027ea:	e016      	b.n	800281a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	0c5b      	lsrs	r3, r3, #17
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d110      	bne.n	800281a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027fe:	2208      	movs	r2, #8
 8002800:	4619      	mov	r1, r3
 8002802:	6a38      	ldr	r0, [r7, #32]
 8002804:	f003 fd66 	bl	80062d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002814:	441a      	add	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0210 	orr.w	r2, r2, #16
 8002828:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fee4 	bl	80065fc <USB_ReadInterrupts>
 8002834:	4603      	mov	r3, r0
 8002836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800283a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800283e:	f040 80a7 	bne.w	8002990 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 fee9 	bl	8006622 <USB_ReadDevAllOutEpInterrupt>
 8002850:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002852:	e099      	b.n	8002988 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 808e 	beq.w	800297c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f003 ff0d 	bl	800668a <USB_ReadDevOutEPInterrupt>
 8002870:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00c      	beq.n	8002896 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002888:	461a      	mov	r2, r3
 800288a:	2301      	movs	r3, #1
 800288c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800288e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fea3 	bl	80035dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00c      	beq.n	80028ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ac:	461a      	mov	r2, r3
 80028ae:	2308      	movs	r3, #8
 80028b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 ff79 	bl	80037ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d0:	461a      	mov	r2, r3
 80028d2:	2310      	movs	r3, #16
 80028d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d030      	beq.n	8002942 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e8:	2b80      	cmp	r3, #128	@ 0x80
 80028ea:	d109      	bne.n	8002900 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	78db      	ldrb	r3, [r3, #3]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d108      	bne.n	8002930 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	b2db      	uxtb	r3, r3
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fb1a 	bl	8000f64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800293c:	461a      	mov	r2, r3
 800293e:	2302      	movs	r3, #2
 8002940:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002958:	461a      	mov	r2, r3
 800295a:	2320      	movs	r3, #32
 800295c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002974:	461a      	mov	r2, r3
 8002976:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800297a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	3301      	adds	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	f47f af62 	bne.w	8002854 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fe31 	bl	80065fc <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029a4:	f040 80db 	bne.w	8002b5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fe52 	bl	8006656 <USB_ReadDevAllInEpInterrupt>
 80029b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029b8:	e0cd      	b.n	8002b56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80c2 	beq.w	8002b4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fe78 	bl	80066c6 <USB_ReadDevInEPInterrupt>
 80029d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d057      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	2201      	movs	r2, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69f9      	ldr	r1, [r7, #28]
 80029fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a02:	4013      	ands	r3, r2
 8002a04:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a12:	461a      	mov	r2, r3
 8002a14:	2301      	movs	r3, #1
 8002a16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	799b      	ldrb	r3, [r3, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d132      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3320      	adds	r3, #32
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4403      	add	r3, r0
 8002a40:	331c      	adds	r3, #28
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4419      	add	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4403      	add	r3, r0
 8002a54:	3320      	adds	r3, #32
 8002a56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x3a2>
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3324      	adds	r3, #36	@ 0x24
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d108      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2101      	movs	r1, #1
 8002a82:	f003 fe7f 	bl	8006784 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fe f9e4 	bl	8000e5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2308      	movs	r3, #8
 8002aac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2340      	movs	r3, #64	@ 0x40
 8002ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d023      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002af0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002af2:	6a38      	ldr	r0, [r7, #32]
 8002af4:	f002 fe66 	bl	80057c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	3310      	adds	r3, #16
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4413      	add	r3, r2
 8002b08:	3304      	adds	r3, #4
 8002b0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	78db      	ldrb	r3, [r3, #3]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d108      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2200      	movs	r2, #0
 8002b18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fe fa31 	bl	8000f88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b32:	461a      	mov	r2, r3
 8002b34:	2302      	movs	r3, #2
 8002b36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fcbd 	bl	80034c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f af2e 	bne.w	80029ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fd4a 	bl	80065fc <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b72:	d122      	bne.n	8002bba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d108      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fea3 	bl	80038e8 <HAL_PCDEx_LPM_Callback>
 8002ba2:	e002      	b.n	8002baa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fe f9cf 	bl	8000f48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fd1c 	bl	80065fc <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bce:	d112      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fe f98b 	bl	8000efc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002bf4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fcfe 	bl	80065fc <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0a:	f040 80b7 	bne.w	8002d7c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2110      	movs	r1, #16
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 fdcb 	bl	80057c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c32:	e046      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c40:	461a      	mov	r2, r3
 8002c42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c58:	0151      	lsls	r1, r2, #5
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	440a      	add	r2, r1
 8002c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c74:	461a      	mov	r2, r3
 8002c76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8c:	0151      	lsls	r1, r2, #5
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	440a      	add	r2, r1
 8002c92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cac:	0151      	lsls	r1, r2, #5
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	440a      	add	r2, r1
 8002cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	791b      	ldrb	r3, [r3, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d3b2      	bcc.n	8002c34 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cdc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ce0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7bdb      	ldrb	r3, [r3, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cfa:	f043 030b 	orr.w	r3, r3, #11
 8002cfe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d10:	f043 030b 	orr.w	r3, r3, #11
 8002d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d16:	e015      	b.n	8002d44 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d2a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d3e:	f043 030b 	orr.w	r3, r3, #11
 8002d42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d66:	461a      	mov	r2, r3
 8002d68:	f003 fd0c 	bl	8006784 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 fc3b 	bl	80065fc <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d90:	d123      	bne.n	8002dda <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 fcd1 	bl	800673e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fd88 	bl	80058b6 <USB_GetDevSpeed>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681c      	ldr	r4, [r3, #0]
 8002db2:	f001 fa09 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8002db6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f002 fa8c 	bl	80052dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fe f870 	bl	8000eaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 fc0c 	bl	80065fc <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d10a      	bne.n	8002e04 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe f84d 	bl	8000e8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f002 0208 	and.w	r2, r2, #8
 8002e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fbf7 	bl	80065fc <USB_ReadInterrupts>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e14:	2b80      	cmp	r3, #128	@ 0x80
 8002e16:	d123      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e24:	2301      	movs	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e28:	e014      	b.n	8002e54 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	4619      	mov	r1, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fb0a 	bl	8003462 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	3301      	adds	r3, #1
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	791b      	ldrb	r3, [r3, #4]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d3e4      	bcc.n	8002e2a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 fbc9 	bl	80065fc <USB_ReadInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e74:	d13c      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e76:	2301      	movs	r3, #1
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7a:	e02b      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d115      	bne.n	8002ece <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ea2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da12      	bge.n	8002ece <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3317      	adds	r3, #23
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 faca 	bl	8003462 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	791b      	ldrb	r3, [r3, #4]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d3cd      	bcc.n	8002e7c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 fb81 	bl	80065fc <USB_ReadInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f04:	d156      	bne.n	8002fb4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f06:	2301      	movs	r3, #1
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0a:	e045      	b.n	8002f98 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d12e      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	da2b      	bge.n	8002f92 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d121      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8e:	6053      	str	r3, [r2, #4]
            break;
 8002f90:	e008      	b.n	8002fa4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	3301      	adds	r3, #1
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	791b      	ldrb	r3, [r3, #4]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d3b3      	bcc.n	8002f0c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fb1f 	bl	80065fc <USB_ReadInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd ffee 	bl	8000fac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 fb09 	bl	80065fc <USB_ReadInterrupts>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d115      	bne.n	8003020 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd ffde 	bl	8000fc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	e000      	b.n	8003020 <HAL_PCD_IRQHandler+0x93c>
      return;
 800301e:	bf00      	nop
    }
  }
}
 8003020:	3734      	adds	r7, #52	@ 0x34
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}

08003026 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_PCD_SetAddress+0x1a>
 800303c:	2302      	movs	r3, #2
 800303e:	e012      	b.n	8003066 <HAL_PCD_SetAddress+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f003 fa68 	bl	800652c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	4608      	mov	r0, r1
 8003078:	4611      	mov	r1, r2
 800307a:	461a      	mov	r2, r3
 800307c:	4603      	mov	r3, r0
 800307e:	70fb      	strb	r3, [r7, #3]
 8003080:	460b      	mov	r3, r1
 8003082:	803b      	strh	r3, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800308c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003090:	2b00      	cmp	r3, #0
 8003092:	da0f      	bge.n	80030b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3310      	adds	r3, #16
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	705a      	strb	r2, [r3, #1]
 80030b2:	e00f      	b.n	80030d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	3304      	adds	r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030e0:	883b      	ldrh	r3, [r7, #0]
 80030e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	78ba      	ldrb	r2, [r7, #2]
 80030ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003102:	78bb      	ldrb	r3, [r7, #2]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d102      	bne.n	800310e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_PCD_EP_Open+0xae>
 8003118:	2302      	movs	r3, #2
 800311a:	e00e      	b.n	800313a <HAL_PCD_EP_Open+0xcc>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	4618      	mov	r0, r3
 800312c:	f002 fbe8 	bl	8005900 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003138:	7afb      	ldrb	r3, [r7, #11]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800314e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003152:	2b00      	cmp	r3, #0
 8003154:	da0f      	bge.n	8003176 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	3310      	adds	r3, #16
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	705a      	strb	r2, [r3, #1]
 8003174:	e00f      	b.n	8003196 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_EP_Close+0x6e>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e00e      	b.n	80031ce <HAL_PCD_EP_Close+0x8c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 fc26 	bl	8005a10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	460b      	mov	r3, r1
 80031e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2200      	movs	r2, #0
 8003210:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	b2da      	uxtb	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	799b      	ldrb	r3, [r3, #6]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d102      	bne.n	8003232 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	799b      	ldrb	r3, [r3, #6]
 800323a:	461a      	mov	r2, r3
 800323c:	6979      	ldr	r1, [r7, #20]
 800323e:	f002 fcc3 	bl	8005bc8 <USB_EPStartXfer>

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	460b      	mov	r3, r1
 800328a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3310      	adds	r3, #16
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	3304      	adds	r3, #4
 80032a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2200      	movs	r2, #0
 80032b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2201      	movs	r2, #1
 80032ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032bc:	7afb      	ldrb	r3, [r7, #11]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	799b      	ldrb	r3, [r3, #6]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	799b      	ldrb	r3, [r3, #6]
 80032de:	461a      	mov	r2, r3
 80032e0:	6979      	ldr	r1, [r7, #20]
 80032e2:	f002 fc71 	bl	8005bc8 <USB_EPStartXfer>

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	7912      	ldrb	r2, [r2, #4]
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e04f      	b.n	80033ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800330e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003312:	2b00      	cmp	r3, #0
 8003314:	da0f      	bge.n	8003336 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	3310      	adds	r3, #16
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	3304      	adds	r3, #4
 800332c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	705a      	strb	r2, [r3, #1]
 8003334:	e00d      	b.n	8003352 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	3304      	adds	r3, #4
 800334a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_PCD_EP_SetStall+0x82>
 800336e:	2302      	movs	r3, #2
 8003370:	e01d      	b.n	80033ae <HAL_PCD_EP_SetStall+0xbe>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	4618      	mov	r0, r3
 8003382:	f002 ffff 	bl	8006384 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7999      	ldrb	r1, [r3, #6]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800339e:	461a      	mov	r2, r3
 80033a0:	f003 f9f0 	bl	8006784 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	7912      	ldrb	r2, [r2, #4]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e042      	b.n	800345a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	da0f      	bge.n	80033fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 020f 	and.w	r2, r3, #15
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	3310      	adds	r3, #16
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	705a      	strb	r2, [r3, #1]
 80033fa:	e00f      	b.n	800341c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 020f 	and.w	r2, r3, #15
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_PCD_EP_ClrStall+0x86>
 8003438:	2302      	movs	r3, #2
 800343a:	e00e      	b.n	800345a <HAL_PCD_EP_ClrStall+0xa4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68f9      	ldr	r1, [r7, #12]
 800344a:	4618      	mov	r0, r3
 800344c:	f003 f808 	bl	8006460 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	460b      	mov	r3, r1
 800346c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800346e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003472:	2b00      	cmp	r3, #0
 8003474:	da0c      	bge.n	8003490 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 020f 	and.w	r2, r3, #15
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	3310      	adds	r3, #16
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	3304      	adds	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e00c      	b.n	80034aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68f9      	ldr	r1, [r7, #12]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f002 fe27 	bl	8006104 <USB_EPStopXfer>
 80034b6:	4603      	mov	r3, r0
 80034b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034ba:	7afb      	ldrb	r3, [r7, #11]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	@ 0x28
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	3310      	adds	r3, #16
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d901      	bls.n	80034fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e06b      	b.n	80035d4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	429a      	cmp	r2, r3
 8003510:	d902      	bls.n	8003518 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	3303      	adds	r3, #3
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003520:	e02a      	b.n	8003578 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	429a      	cmp	r2, r3
 8003536:	d902      	bls.n	800353e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3303      	adds	r3, #3
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68d9      	ldr	r1, [r3, #12]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	4603      	mov	r3, r0
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f002 fe7c 	bl	8006258 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	441a      	add	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	441a      	add	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	429a      	cmp	r2, r3
 800358c:	d809      	bhi.n	80035a2 <PCD_WriteEmptyTxFifo+0xde>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003596:	429a      	cmp	r2, r3
 8003598:	d203      	bcs.n	80035a2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1bf      	bne.n	8003522 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d811      	bhi.n	80035d2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	2201      	movs	r2, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035ce:	4013      	ands	r3, r2
 80035d0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	333c      	adds	r3, #60	@ 0x3c
 80035f4:	3304      	adds	r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d17b      	bne.n	800370a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d015      	beq.n	8003648 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4a61      	ldr	r2, [pc, #388]	@ (80037a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	f240 80b9 	bls.w	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80b3 	beq.w	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363e:	461a      	mov	r2, r3
 8003640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003644:	6093      	str	r3, [r2, #8]
 8003646:	e0a7      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365e:	461a      	mov	r2, r3
 8003660:	2320      	movs	r3, #32
 8003662:	6093      	str	r3, [r2, #8]
 8003664:	e098      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	f040 8093 	bne.w	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	4a4b      	ldr	r2, [pc, #300]	@ (80037a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d90f      	bls.n	800369a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003696:	6093      	str	r3, [r2, #8]
 8003698:	e07e      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1a      	ldr	r2, [r3, #32]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	0159      	lsls	r1, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	440b      	add	r3, r1
 80036bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d114      	bne.n	80036fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036e4:	461a      	mov	r2, r3
 80036e6:	2101      	movs	r1, #1
 80036e8:	f003 f84c 	bl	8006784 <USB_EP0_OutStart>
 80036ec:	e006      	b.n	80036fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	441a      	add	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fb8e 	bl	8000e24 <HAL_PCD_DataOutStageCallback>
 8003708:	e046      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4a26      	ldr	r2, [pc, #152]	@ (80037a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d124      	bne.n	800375c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003728:	461a      	mov	r2, r3
 800372a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800372e:	6093      	str	r3, [r2, #8]
 8003730:	e032      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	2320      	movs	r3, #32
 800374c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fd fb65 	bl	8000e24 <HAL_PCD_DataOutStageCallback>
 800375a:	e01d      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d114      	bne.n	800378c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003784:	461a      	mov	r2, r3
 8003786:	2100      	movs	r1, #0
 8003788:	f002 fffc 	bl	8006784 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fb46 	bl	8000e24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	4f54300a 	.word	0x4f54300a
 80037a8:	4f54310a 	.word	0x4f54310a

080037ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	333c      	adds	r3, #60	@ 0x3c
 80037c4:	3304      	adds	r3, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a15      	ldr	r2, [pc, #84]	@ (8003834 <PCD_EP_OutSetupPacket_int+0x88>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d90e      	bls.n	8003800 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f8:	461a      	mov	r2, r3
 80037fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fd fafd 	bl	8000e00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a0a      	ldr	r2, [pc, #40]	@ (8003834 <PCD_EP_OutSetupPacket_int+0x88>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d90c      	bls.n	8003828 <PCD_EP_OutSetupPacket_int+0x7c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	799b      	ldrb	r3, [r3, #6]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003820:	461a      	mov	r2, r3
 8003822:	2101      	movs	r1, #1
 8003824:	f002 ffae 	bl	8006784 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	4f54300a 	.word	0x4f54300a

08003838 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
 8003844:	4613      	mov	r3, r2
 8003846:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003856:	883b      	ldrh	r3, [r7, #0]
 8003858:	0419      	lsls	r1, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	430a      	orrs	r2, r1
 8003862:	629a      	str	r2, [r3, #40]	@ 0x28
 8003864:	e028      	b.n	80038b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e00d      	b.n	8003896 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3340      	adds	r3, #64	@ 0x40
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4413      	add	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	3301      	adds	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	3b01      	subs	r3, #1
 800389c:	429a      	cmp	r2, r3
 800389e:	d3ec      	bcc.n	800387a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038a0:	883b      	ldrh	r3, [r7, #0]
 80038a2:	0418      	lsls	r0, r3, #16
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4302      	orrs	r2, r0
 80038b0:	3340      	adds	r3, #64	@ 0x40
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e267      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d075      	beq.n	8003a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800391e:	4b88      	ldr	r3, [pc, #544]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b04      	cmp	r3, #4
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b85      	ldr	r3, [pc, #532]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003932:	2b08      	cmp	r3, #8
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b82      	ldr	r3, [pc, #520]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b7e      	ldr	r3, [pc, #504]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x108>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e242      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x74>
 8003966:	4b76      	ldr	r3, [pc, #472]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a75      	ldr	r2, [pc, #468]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x98>
 800397e:	4b70      	ldr	r3, [pc, #448]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6f      	ldr	r2, [pc, #444]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6c      	ldr	r2, [pc, #432]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003998:	4b69      	ldr	r3, [pc, #420]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a68      	ldr	r2, [pc, #416]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b66      	ldr	r3, [pc, #408]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a65      	ldr	r2, [pc, #404]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd fe72 	bl	80016a0 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fd fe6e 	bl	80016a0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	@ 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e207      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xc0>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fd fe5e 	bl	80016a0 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fd fe5a 	bl	80016a0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	@ 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1f3      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b51      	ldr	r3, [pc, #324]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0xe8>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d063      	beq.n	8003ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a16:	4b4a      	ldr	r3, [pc, #296]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b47      	ldr	r3, [pc, #284]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d11c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b44      	ldr	r3, [pc, #272]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	4b41      	ldr	r3, [pc, #260]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1c7      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b3b      	ldr	r3, [pc, #236]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4937      	ldr	r1, [pc, #220]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	e03a      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a70:	4b34      	ldr	r3, [pc, #208]	@ (8003b44 <HAL_RCC_OscConfig+0x244>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd fe13 	bl	80016a0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fd fe0f 	bl	80016a0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e1a8      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	4b2b      	ldr	r3, [pc, #172]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b28      	ldr	r3, [pc, #160]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4925      	ldr	r1, [pc, #148]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	4b24      	ldr	r3, [pc, #144]	@ (8003b44 <HAL_RCC_OscConfig+0x244>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fdf2 	bl	80016a0 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fd fdee 	bl	80016a0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e187      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d036      	beq.n	8003b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <HAL_RCC_OscConfig+0x248>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd fdd2 	bl	80016a0 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fd fdce 	bl	80016a0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e167      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x200>
 8003b1e:	e01b      	b.n	8003b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <HAL_RCC_OscConfig+0x248>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fd fdbb 	bl	80016a0 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	e00e      	b.n	8003b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fd fdb7 	bl	80016a0 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d907      	bls.n	8003b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e150      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470000 	.word	0x42470000
 8003b48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b88      	ldr	r3, [pc, #544]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ea      	bne.n	8003b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8097 	beq.w	8003c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b81      	ldr	r3, [pc, #516]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b86:	4b7a      	ldr	r3, [pc, #488]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b77      	ldr	r3, [pc, #476]	@ (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b74      	ldr	r3, [pc, #464]	@ (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a73      	ldr	r2, [pc, #460]	@ (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fd fd77 	bl	80016a0 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd fd73 	bl	80016a0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e10c      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x2ea>
 8003bdc:	4b64      	ldr	r3, [pc, #400]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be0:	4a63      	ldr	r2, [pc, #396]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be8:	e01c      	b.n	8003c24 <HAL_RCC_OscConfig+0x324>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x30c>
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	4a5b      	ldr	r2, [pc, #364]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x324>
 8003c0c:	4b58      	ldr	r3, [pc, #352]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	4a57      	ldr	r2, [pc, #348]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c18:	4b55      	ldr	r3, [pc, #340]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1c:	4a54      	ldr	r2, [pc, #336]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd fd38 	bl	80016a0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fd fd34 	bl	80016a0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e0cb      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	4b49      	ldr	r3, [pc, #292]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0ee      	beq.n	8003c34 <HAL_RCC_OscConfig+0x334>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fd fd22 	bl	80016a0 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fd fd1e 	bl	80016a0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0b5      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	4b3e      	ldr	r3, [pc, #248]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ee      	bne.n	8003c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b39      	ldr	r3, [pc, #228]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	4a38      	ldr	r2, [pc, #224]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a1 	beq.w	8003de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9e:	4b34      	ldr	r3, [pc, #208]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d05c      	beq.n	8003d64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d141      	bne.n	8003d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb2:	4b31      	ldr	r3, [pc, #196]	@ (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fd fcf2 	bl	80016a0 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd fcee 	bl	80016a0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e087      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	4b27      	ldr	r3, [pc, #156]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	491b      	ldr	r1, [pc, #108]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d08:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fd fcc7 	bl	80016a0 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fd fcc3 	bl	80016a0 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e05c      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d28:	4b11      	ldr	r3, [pc, #68]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x416>
 8003d34:	e054      	b.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	4b10      	ldr	r3, [pc, #64]	@ (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fcb0 	bl	80016a0 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fd fcac 	bl	80016a0 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e045      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x444>
 8003d62:	e03d      	b.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e038      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40007000 	.word	0x40007000
 8003d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_RCC_OscConfig+0x4ec>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d028      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d121      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d11a      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d111      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800

08003df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0cc      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e04:	4b68      	ldr	r3, [pc, #416]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d90c      	bls.n	8003e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e12:	4b65      	ldr	r3, [pc, #404]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	4b63      	ldr	r3, [pc, #396]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0b8      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e44:	4b59      	ldr	r3, [pc, #356]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a58      	ldr	r2, [pc, #352]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e5c:	4b53      	ldr	r3, [pc, #332]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a52      	ldr	r2, [pc, #328]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e68:	4b50      	ldr	r3, [pc, #320]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	494d      	ldr	r1, [pc, #308]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d044      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	4b47      	ldr	r3, [pc, #284]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d119      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e07f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d107      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b3f      	ldr	r3, [pc, #252]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e067      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ece:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 0203 	bic.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4934      	ldr	r1, [pc, #208]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee0:	f7fd fbde 	bl	80016a0 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee8:	f7fd fbda 	bl	80016a0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e04f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	4b2b      	ldr	r3, [pc, #172]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 020c 	and.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d1eb      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f10:	4b25      	ldr	r3, [pc, #148]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d20c      	bcs.n	8003f38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b22      	ldr	r3, [pc, #136]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e032      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f44:	4b19      	ldr	r3, [pc, #100]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4916      	ldr	r1, [pc, #88]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f62:	4b12      	ldr	r3, [pc, #72]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	490e      	ldr	r1, [pc, #56]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f76:	f000 f821 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	490a      	ldr	r1, [pc, #40]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	5ccb      	ldrb	r3, [r1, r3]
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	4a09      	ldr	r2, [pc, #36]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f92:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fb3e 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023c00 	.word	0x40023c00
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	080088b4 	.word	0x080088b4
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	20000068 	.word	0x20000068

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc0:	b094      	sub	sp, #80	@ 0x50
 8003fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd4:	4b79      	ldr	r3, [pc, #484]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d00d      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x40>
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	f200 80e1 	bhi.w	80041a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fee:	e0db      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff0:	4b73      	ldr	r3, [pc, #460]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ff4:	e0db      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff6:	4b73      	ldr	r3, [pc, #460]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ffa:	e0d8      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004004:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004006:	4b6d      	ldr	r3, [pc, #436]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004012:	4b6a      	ldr	r3, [pc, #424]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	2200      	movs	r2, #0
 800401a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800401c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004024:	633b      	str	r3, [r7, #48]	@ 0x30
 8004026:	2300      	movs	r3, #0
 8004028:	637b      	str	r3, [r7, #52]	@ 0x34
 800402a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004040:	0150      	lsls	r0, r2, #5
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4621      	mov	r1, r4
 8004048:	1a51      	subs	r1, r2, r1
 800404a:	6139      	str	r1, [r7, #16]
 800404c:	4629      	mov	r1, r5
 800404e:	eb63 0301 	sbc.w	r3, r3, r1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004060:	4659      	mov	r1, fp
 8004062:	018b      	lsls	r3, r1, #6
 8004064:	4651      	mov	r1, sl
 8004066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406a:	4651      	mov	r1, sl
 800406c:	018a      	lsls	r2, r1, #6
 800406e:	4651      	mov	r1, sl
 8004070:	ebb2 0801 	subs.w	r8, r2, r1
 8004074:	4659      	mov	r1, fp
 8004076:	eb63 0901 	sbc.w	r9, r3, r1
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800408a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408e:	4690      	mov	r8, r2
 8004090:	4699      	mov	r9, r3
 8004092:	4623      	mov	r3, r4
 8004094:	eb18 0303 	adds.w	r3, r8, r3
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	462b      	mov	r3, r5
 800409c:	eb49 0303 	adc.w	r3, r9, r3
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ae:	4629      	mov	r1, r5
 80040b0:	024b      	lsls	r3, r1, #9
 80040b2:	4621      	mov	r1, r4
 80040b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040b8:	4621      	mov	r1, r4
 80040ba:	024a      	lsls	r2, r1, #9
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c2:	2200      	movs	r2, #0
 80040c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040cc:	f7fc f87c 	bl	80001c8 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4613      	mov	r3, r2
 80040d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d8:	e058      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040da:	4b38      	ldr	r3, [pc, #224]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	2200      	movs	r2, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	4611      	mov	r1, r2
 80040e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	f04f 0000 	mov.w	r0, #0
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	0159      	lsls	r1, r3, #5
 8004102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004106:	0150      	lsls	r0, r2, #5
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4641      	mov	r1, r8
 800410e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb63 0b01 	sbc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800412c:	ebb2 040a 	subs.w	r4, r2, sl
 8004130:	eb63 050b 	sbc.w	r5, r3, fp
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	00eb      	lsls	r3, r5, #3
 800413e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004142:	00e2      	lsls	r2, r4, #3
 8004144:	4614      	mov	r4, r2
 8004146:	461d      	mov	r5, r3
 8004148:	4643      	mov	r3, r8
 800414a:	18e3      	adds	r3, r4, r3
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	464b      	mov	r3, r9
 8004150:	eb45 0303 	adc.w	r3, r5, r3
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004162:	4629      	mov	r1, r5
 8004164:	028b      	lsls	r3, r1, #10
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800416c:	4621      	mov	r1, r4
 800416e:	028a      	lsls	r2, r1, #10
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004176:	2200      	movs	r2, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	61fa      	str	r2, [r7, #28]
 800417c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004180:	f7fc f822 	bl	80001c8 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800419c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800419e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3750      	adds	r7, #80	@ 0x50
 80041b4:	46bd      	mov	sp, r7
 80041b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000000 	.word	0x20000000

080041e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e041      	b.n	8004276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fbf2 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f000 fbfa 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e041      	b.n	8004314 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f839 	bl	800431c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f000 fbab 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_TIM_PWM_Start+0x24>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e022      	b.n	800439a <HAL_TIM_PWM_Start+0x6a>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d109      	bne.n	800436e <HAL_TIM_PWM_Start+0x3e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	bf14      	ite	ne
 8004366:	2301      	movne	r3, #1
 8004368:	2300      	moveq	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	e015      	b.n	800439a <HAL_TIM_PWM_Start+0x6a>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d109      	bne.n	8004388 <HAL_TIM_PWM_Start+0x58>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e008      	b.n	800439a <HAL_TIM_PWM_Start+0x6a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	bf14      	ite	ne
 8004394:	2301      	movne	r3, #1
 8004396:	2300      	moveq	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e07c      	b.n	800449c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_PWM_Start+0x82>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b0:	e013      	b.n	80043da <HAL_TIM_PWM_Start+0xaa>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_PWM_Start+0x92>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c0:	e00b      	b.n	80043da <HAL_TIM_PWM_Start+0xaa>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_PWM_Start+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d0:	e003      	b.n	80043da <HAL_TIM_PWM_Start+0xaa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2201      	movs	r2, #1
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fe0e 	bl	8005004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a2d      	ldr	r2, [pc, #180]	@ (80044a4 <HAL_TIM_PWM_Start+0x174>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_TIM_PWM_Start+0xcc>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2c      	ldr	r2, [pc, #176]	@ (80044a8 <HAL_TIM_PWM_Start+0x178>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d101      	bne.n	8004400 <HAL_TIM_PWM_Start+0xd0>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_TIM_PWM_Start+0xd2>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a22      	ldr	r2, [pc, #136]	@ (80044a4 <HAL_TIM_PWM_Start+0x174>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <HAL_TIM_PWM_Start+0x136>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004428:	d01d      	beq.n	8004466 <HAL_TIM_PWM_Start+0x136>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1f      	ldr	r2, [pc, #124]	@ (80044ac <HAL_TIM_PWM_Start+0x17c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <HAL_TIM_PWM_Start+0x136>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1d      	ldr	r2, [pc, #116]	@ (80044b0 <HAL_TIM_PWM_Start+0x180>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_TIM_PWM_Start+0x136>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1c      	ldr	r2, [pc, #112]	@ (80044b4 <HAL_TIM_PWM_Start+0x184>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <HAL_TIM_PWM_Start+0x136>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <HAL_TIM_PWM_Start+0x178>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_TIM_PWM_Start+0x136>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a18      	ldr	r2, [pc, #96]	@ (80044b8 <HAL_TIM_PWM_Start+0x188>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_TIM_PWM_Start+0x136>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a16      	ldr	r2, [pc, #88]	@ (80044bc <HAL_TIM_PWM_Start+0x18c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d111      	bne.n	800448a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b06      	cmp	r3, #6
 8004476:	d010      	beq.n	800449a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	e007      	b.n	800449a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40001800 	.word	0x40001800

080044c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0202 	mvn.w	r2, #2
 80044f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa65 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa57 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa68 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0204 	mvn.w	r2, #4
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa3f 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa31 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa42 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fa19 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa0b 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fa1c 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0210 	mvn.w	r2, #16
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2208      	movs	r2, #8
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f9f3 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f9e5 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f9f6 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0201 	mvn.w	r2, #1
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9c3 	bl	80049b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fdd8 	bl	8005200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00c      	beq.n	8004674 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9c7 	bl	8004a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0220 	mvn.w	r2, #32
 8004690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fdaa 	bl	80051ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e0ae      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	f200 809f 	bhi.w	800480c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046ce:	a201      	add	r2, pc, #4	@ (adr r2, 80046d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	08004709 	.word	0x08004709
 80046d8:	0800480d 	.word	0x0800480d
 80046dc:	0800480d 	.word	0x0800480d
 80046e0:	0800480d 	.word	0x0800480d
 80046e4:	08004749 	.word	0x08004749
 80046e8:	0800480d 	.word	0x0800480d
 80046ec:	0800480d 	.word	0x0800480d
 80046f0:	0800480d 	.word	0x0800480d
 80046f4:	0800478b 	.word	0x0800478b
 80046f8:	0800480d 	.word	0x0800480d
 80046fc:	0800480d 	.word	0x0800480d
 8004700:	0800480d 	.word	0x0800480d
 8004704:	080047cb 	.word	0x080047cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fa2e 	bl	8004b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0208 	orr.w	r2, r2, #8
 8004722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6999      	ldr	r1, [r3, #24]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	619a      	str	r2, [r3, #24]
      break;
 8004746:	e064      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa7e 	bl	8004c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6999      	ldr	r1, [r3, #24]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	021a      	lsls	r2, r3, #8
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	619a      	str	r2, [r3, #24]
      break;
 8004788:	e043      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fad3 	bl	8004d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0208 	orr.w	r2, r2, #8
 80047a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0204 	bic.w	r2, r2, #4
 80047b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69d9      	ldr	r1, [r3, #28]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	61da      	str	r2, [r3, #28]
      break;
 80047c8:	e023      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fb27 	bl	8004e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69d9      	ldr	r1, [r3, #28]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	021a      	lsls	r2, r3, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	61da      	str	r2, [r3, #28]
      break;
 800480a:	e002      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
      break;
 8004810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800481a:	7dfb      	ldrb	r3, [r7, #23]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIM_ConfigClockSource+0x1c>
 800483c:	2302      	movs	r3, #2
 800483e:	e0b4      	b.n	80049aa <HAL_TIM_ConfigClockSource+0x186>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800485e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004878:	d03e      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0xd4>
 800487a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487e:	f200 8087 	bhi.w	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004886:	f000 8086 	beq.w	8004996 <HAL_TIM_ConfigClockSource+0x172>
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488e:	d87f      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 8004890:	2b70      	cmp	r3, #112	@ 0x70
 8004892:	d01a      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0xa6>
 8004894:	2b70      	cmp	r3, #112	@ 0x70
 8004896:	d87b      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 8004898:	2b60      	cmp	r3, #96	@ 0x60
 800489a:	d050      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x11a>
 800489c:	2b60      	cmp	r3, #96	@ 0x60
 800489e:	d877      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b50      	cmp	r3, #80	@ 0x50
 80048a2:	d03c      	beq.n	800491e <HAL_TIM_ConfigClockSource+0xfa>
 80048a4:	2b50      	cmp	r3, #80	@ 0x50
 80048a6:	d873      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b40      	cmp	r3, #64	@ 0x40
 80048aa:	d058      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x13a>
 80048ac:	2b40      	cmp	r3, #64	@ 0x40
 80048ae:	d86f      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b30      	cmp	r3, #48	@ 0x30
 80048b2:	d064      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x15a>
 80048b4:	2b30      	cmp	r3, #48	@ 0x30
 80048b6:	d86b      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d060      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x15a>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d867      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d05c      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x15a>
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d05a      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x15a>
 80048c8:	e062      	b.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048da:	f000 fb73 	bl	8004fc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	609a      	str	r2, [r3, #8]
      break;
 80048f6:	e04f      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004908:	f000 fb5c 	bl	8004fc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800491a:	609a      	str	r2, [r3, #8]
      break;
 800491c:	e03c      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	461a      	mov	r2, r3
 800492c:	f000 fad0 	bl	8004ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2150      	movs	r1, #80	@ 0x50
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fb29 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 800493c:	e02c      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800494a:	461a      	mov	r2, r3
 800494c:	f000 faef 	bl	8004f2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2160      	movs	r1, #96	@ 0x60
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fb19 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 800495c:	e01c      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	461a      	mov	r2, r3
 800496c:	f000 fab0 	bl	8004ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2140      	movs	r1, #64	@ 0x40
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fb09 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 800497c:	e00c      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 fb00 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 800498e:	e003      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	e000      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a46      	ldr	r2, [pc, #280]	@ (8004b44 <TIM_Base_SetConfig+0x12c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a36:	d00f      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a43      	ldr	r2, [pc, #268]	@ (8004b48 <TIM_Base_SetConfig+0x130>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a42      	ldr	r2, [pc, #264]	@ (8004b4c <TIM_Base_SetConfig+0x134>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a41      	ldr	r2, [pc, #260]	@ (8004b50 <TIM_Base_SetConfig+0x138>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a40      	ldr	r2, [pc, #256]	@ (8004b54 <TIM_Base_SetConfig+0x13c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a35      	ldr	r2, [pc, #212]	@ (8004b44 <TIM_Base_SetConfig+0x12c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a78:	d027      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a32      	ldr	r2, [pc, #200]	@ (8004b48 <TIM_Base_SetConfig+0x130>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d023      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a31      	ldr	r2, [pc, #196]	@ (8004b4c <TIM_Base_SetConfig+0x134>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a30      	ldr	r2, [pc, #192]	@ (8004b50 <TIM_Base_SetConfig+0x138>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2f      	ldr	r2, [pc, #188]	@ (8004b54 <TIM_Base_SetConfig+0x13c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d017      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b58 <TIM_Base_SetConfig+0x140>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b5c <TIM_Base_SetConfig+0x144>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00f      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2c      	ldr	r2, [pc, #176]	@ (8004b60 <TIM_Base_SetConfig+0x148>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b64 <TIM_Base_SetConfig+0x14c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2a      	ldr	r2, [pc, #168]	@ (8004b68 <TIM_Base_SetConfig+0x150>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a29      	ldr	r2, [pc, #164]	@ (8004b6c <TIM_Base_SetConfig+0x154>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d108      	bne.n	8004adc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a10      	ldr	r2, [pc, #64]	@ (8004b44 <TIM_Base_SetConfig+0x12c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_Base_SetConfig+0xf8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	@ (8004b54 <TIM_Base_SetConfig+0x13c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d103      	bne.n	8004b18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d105      	bne.n	8004b36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]
  }
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40010400 	.word	0x40010400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800
 8004b64:	40001800 	.word	0x40001800
 8004b68:	40001c00 	.word	0x40001c00
 8004b6c:	40002000 	.word	0x40002000

08004b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f023 0201 	bic.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f023 0302 	bic.w	r3, r3, #2
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a20      	ldr	r2, [pc, #128]	@ (8004c48 <TIM_OC1_SetConfig+0xd8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x64>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1f      	ldr	r2, [pc, #124]	@ (8004c4c <TIM_OC1_SetConfig+0xdc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10c      	bne.n	8004bee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0308 	bic.w	r3, r3, #8
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a15      	ldr	r2, [pc, #84]	@ (8004c48 <TIM_OC1_SetConfig+0xd8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC1_SetConfig+0x8e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a14      	ldr	r2, [pc, #80]	@ (8004c4c <TIM_OC1_SetConfig+0xdc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d111      	bne.n	8004c22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40010400 	.word	0x40010400

08004c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f023 0210 	bic.w	r2, r3, #16
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0320 	bic.w	r3, r3, #32
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a22      	ldr	r2, [pc, #136]	@ (8004d34 <TIM_OC2_SetConfig+0xe4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC2_SetConfig+0x68>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a21      	ldr	r2, [pc, #132]	@ (8004d38 <TIM_OC2_SetConfig+0xe8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d10d      	bne.n	8004cd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a17      	ldr	r2, [pc, #92]	@ (8004d34 <TIM_OC2_SetConfig+0xe4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC2_SetConfig+0x94>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a16      	ldr	r2, [pc, #88]	@ (8004d38 <TIM_OC2_SetConfig+0xe8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d113      	bne.n	8004d0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a21      	ldr	r2, [pc, #132]	@ (8004e1c <TIM_OC3_SetConfig+0xe0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC3_SetConfig+0x66>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a20      	ldr	r2, [pc, #128]	@ (8004e20 <TIM_OC3_SetConfig+0xe4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10d      	bne.n	8004dbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	@ (8004e1c <TIM_OC3_SetConfig+0xe0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_OC3_SetConfig+0x92>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	@ (8004e20 <TIM_OC3_SetConfig+0xe4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d113      	bne.n	8004df6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40010400 	.word	0x40010400

08004e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a12      	ldr	r2, [pc, #72]	@ (8004ec8 <TIM_OC4_SetConfig+0xa4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_OC4_SetConfig+0x68>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a11      	ldr	r2, [pc, #68]	@ (8004ecc <TIM_OC4_SetConfig+0xa8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d109      	bne.n	8004ea0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	019b      	lsls	r3, r3, #6
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0201 	bic.w	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 030a 	bic.w	r3, r3, #10
 8004f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f023 0210 	bic.w	r2, r3, #16
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	031b      	lsls	r3, r3, #12
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f043 0307 	orr.w	r3, r3, #7
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	609a      	str	r2, [r3, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	021a      	lsls	r2, r3, #8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	609a      	str	r2, [r3, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2201      	movs	r2, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	43db      	mvns	r3, r3
 8005026:	401a      	ands	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005064:	2302      	movs	r3, #2
 8005066:	e05a      	b.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b4:	d01d      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a17      	ldr	r2, [pc, #92]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10c      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40001800 	.word	0x40001800

08005148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e03d      	b.n	80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005214:	b084      	sub	sp, #16
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	f107 001c 	add.w	r0, r7, #28
 8005222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005226:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800522a:	2b01      	cmp	r3, #1
 800522c:	d123      	bne.n	8005276 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005256:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800525a:	2b01      	cmp	r3, #1
 800525c:	d105      	bne.n	800526a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f001 fae8 	bl	8006840 <USB_CoreReset>
 8005270:	4603      	mov	r3, r0
 8005272:	73fb      	strb	r3, [r7, #15]
 8005274:	e01b      	b.n	80052ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 fadc 	bl	8006840 <USB_CoreReset>
 8005288:	4603      	mov	r3, r0
 800528a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800528c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	639a      	str	r2, [r3, #56]	@ 0x38
 80052a0:	e005      	b.n	80052ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052ae:	7fbb      	ldrb	r3, [r7, #30]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10b      	bne.n	80052cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f043 0206 	orr.w	r2, r3, #6
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f043 0220 	orr.w	r2, r3, #32
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d8:	b004      	add	sp, #16
 80052da:	4770      	bx	lr

080052dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d165      	bne.n	80053bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a41      	ldr	r2, [pc, #260]	@ (80053f8 <USB_SetTurnaroundTime+0x11c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d906      	bls.n	8005306 <USB_SetTurnaroundTime+0x2a>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4a40      	ldr	r2, [pc, #256]	@ (80053fc <USB_SetTurnaroundTime+0x120>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d202      	bcs.n	8005306 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005300:	230f      	movs	r3, #15
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e062      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4a3c      	ldr	r2, [pc, #240]	@ (80053fc <USB_SetTurnaroundTime+0x120>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d306      	bcc.n	800531c <USB_SetTurnaroundTime+0x40>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4a3b      	ldr	r2, [pc, #236]	@ (8005400 <USB_SetTurnaroundTime+0x124>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d202      	bcs.n	800531c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005316:	230e      	movs	r3, #14
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e057      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a38      	ldr	r2, [pc, #224]	@ (8005400 <USB_SetTurnaroundTime+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d306      	bcc.n	8005332 <USB_SetTurnaroundTime+0x56>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4a37      	ldr	r2, [pc, #220]	@ (8005404 <USB_SetTurnaroundTime+0x128>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d202      	bcs.n	8005332 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800532c:	230d      	movs	r3, #13
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	e04c      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a33      	ldr	r2, [pc, #204]	@ (8005404 <USB_SetTurnaroundTime+0x128>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d306      	bcc.n	8005348 <USB_SetTurnaroundTime+0x6c>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4a32      	ldr	r2, [pc, #200]	@ (8005408 <USB_SetTurnaroundTime+0x12c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d802      	bhi.n	8005348 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005342:	230c      	movs	r3, #12
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e041      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a2f      	ldr	r2, [pc, #188]	@ (8005408 <USB_SetTurnaroundTime+0x12c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d906      	bls.n	800535e <USB_SetTurnaroundTime+0x82>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4a2e      	ldr	r2, [pc, #184]	@ (800540c <USB_SetTurnaroundTime+0x130>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d802      	bhi.n	800535e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005358:	230b      	movs	r3, #11
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e036      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a2a      	ldr	r2, [pc, #168]	@ (800540c <USB_SetTurnaroundTime+0x130>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d906      	bls.n	8005374 <USB_SetTurnaroundTime+0x98>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4a29      	ldr	r2, [pc, #164]	@ (8005410 <USB_SetTurnaroundTime+0x134>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d802      	bhi.n	8005374 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800536e:	230a      	movs	r3, #10
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e02b      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a26      	ldr	r2, [pc, #152]	@ (8005410 <USB_SetTurnaroundTime+0x134>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d906      	bls.n	800538a <USB_SetTurnaroundTime+0xae>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4a25      	ldr	r2, [pc, #148]	@ (8005414 <USB_SetTurnaroundTime+0x138>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d202      	bcs.n	800538a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005384:	2309      	movs	r3, #9
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e020      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a21      	ldr	r2, [pc, #132]	@ (8005414 <USB_SetTurnaroundTime+0x138>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d306      	bcc.n	80053a0 <USB_SetTurnaroundTime+0xc4>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4a20      	ldr	r2, [pc, #128]	@ (8005418 <USB_SetTurnaroundTime+0x13c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d802      	bhi.n	80053a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800539a:	2308      	movs	r3, #8
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e015      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <USB_SetTurnaroundTime+0x13c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d906      	bls.n	80053b6 <USB_SetTurnaroundTime+0xda>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4a1c      	ldr	r2, [pc, #112]	@ (800541c <USB_SetTurnaroundTime+0x140>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d202      	bcs.n	80053b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053b0:	2307      	movs	r3, #7
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e00a      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053b6:	2306      	movs	r3, #6
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e007      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053c2:	2309      	movs	r3, #9
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	e001      	b.n	80053cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053c8:	2309      	movs	r3, #9
 80053ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	029b      	lsls	r3, r3, #10
 80053e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	00d8acbf 	.word	0x00d8acbf
 80053fc:	00e4e1c0 	.word	0x00e4e1c0
 8005400:	00f42400 	.word	0x00f42400
 8005404:	01067380 	.word	0x01067380
 8005408:	011a499f 	.word	0x011a499f
 800540c:	01312cff 	.word	0x01312cff
 8005410:	014ca43f 	.word	0x014ca43f
 8005414:	016e3600 	.word	0x016e3600
 8005418:	01a6ab1f 	.word	0x01a6ab1f
 800541c:	01e84800 	.word	0x01e84800

08005420 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f043 0201 	orr.w	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 0201 	bic.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d115      	bne.n	80054b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005492:	200a      	movs	r0, #10
 8005494:	f7fc f910 	bl	80016b8 <HAL_Delay>
      ms += 10U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	330a      	adds	r3, #10
 800549c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 f93f 	bl	8006722 <USB_GetMode>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d01e      	beq.n	80054e8 <USB_SetCurrentMode+0x84>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80054ae:	d9f0      	bls.n	8005492 <USB_SetCurrentMode+0x2e>
 80054b0:	e01a      	b.n	80054e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d115      	bne.n	80054e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054c4:	200a      	movs	r0, #10
 80054c6:	f7fc f8f7 	bl	80016b8 <HAL_Delay>
      ms += 10U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	330a      	adds	r3, #10
 80054ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 f926 	bl	8006722 <USB_GetMode>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <USB_SetCurrentMode+0x84>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2bc7      	cmp	r3, #199	@ 0xc7
 80054e0:	d9f0      	bls.n	80054c4 <USB_SetCurrentMode+0x60>
 80054e2:	e001      	b.n	80054e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e005      	b.n	80054f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80054ec:	d101      	bne.n	80054f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054fc:	b084      	sub	sp, #16
 80054fe:	b580      	push	{r7, lr}
 8005500:	b086      	sub	sp, #24
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800550a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	e009      	b.n	8005530 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3340      	adds	r3, #64	@ 0x40
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	2200      	movs	r2, #0
 8005528:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3301      	adds	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b0e      	cmp	r3, #14
 8005534:	d9f2      	bls.n	800551c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005536:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11c      	bne.n	8005578 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800554c:	f043 0302 	orr.w	r3, r3, #2
 8005550:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005556:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005562:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	639a      	str	r2, [r3, #56]	@ 0x38
 8005576:	e00b      	b.n	8005590 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800559c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10d      	bne.n	80055c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ac:	2100      	movs	r1, #0
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f968 	bl	8005884 <USB_SetDevSpeed>
 80055b4:	e008      	b.n	80055c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055b6:	2101      	movs	r1, #1
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f963 	bl	8005884 <USB_SetDevSpeed>
 80055be:	e003      	b.n	80055c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055c0:	2103      	movs	r1, #3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f95e 	bl	8005884 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055c8:	2110      	movs	r1, #16
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8fa 	bl	80057c4 <USB_FlushTxFifo>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f924 	bl	8005828 <USB_FlushRxFifo>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fc:	461a      	mov	r2, r3
 80055fe:	2300      	movs	r3, #0
 8005600:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e043      	b.n	800569c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800562a:	d118      	bne.n	800565e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563e:	461a      	mov	r2, r3
 8005640:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e013      	b.n	8005670 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005654:	461a      	mov	r2, r3
 8005656:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	e008      	b.n	8005670 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566a:	461a      	mov	r2, r3
 800566c:	2300      	movs	r3, #0
 800566e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568e:	461a      	mov	r2, r3
 8005690:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005694:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	3301      	adds	r3, #1
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056a0:	461a      	mov	r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d3b5      	bcc.n	8005614 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	e043      	b.n	8005736 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056c4:	d118      	bne.n	80056f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	e013      	b.n	800570a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ee:	461a      	mov	r2, r3
 80056f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e008      	b.n	800570a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005704:	461a      	mov	r2, r3
 8005706:	2300      	movs	r3, #0
 8005708:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800572e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	3301      	adds	r3, #1
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800573a:	461a      	mov	r2, r3
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4293      	cmp	r3, r2
 8005740:	d3b5      	bcc.n	80056ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005754:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005762:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005764:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f043 0210 	orr.w	r2, r3, #16
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	4b10      	ldr	r3, [pc, #64]	@ (80057c0 <USB_DevInit+0x2c4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005784:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f043 0208 	orr.w	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005798:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800579c:	2b01      	cmp	r3, #1
 800579e:	d107      	bne.n	80057b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057a8:	f043 0304 	orr.w	r3, r3, #4
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057bc:	b004      	add	sp, #16
 80057be:	4770      	bx	lr
 80057c0:	803c3800 	.word	0x803c3800

080057c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3301      	adds	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057de:	d901      	bls.n	80057e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e01b      	b.n	800581c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	daf2      	bge.n	80057d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	019b      	lsls	r3, r3, #6
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005808:	d901      	bls.n	800580e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e006      	b.n	800581c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b20      	cmp	r3, #32
 8005818:	d0f0      	beq.n	80057fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005840:	d901      	bls.n	8005846 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e018      	b.n	8005878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	daf2      	bge.n	8005834 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2210      	movs	r2, #16
 8005856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005864:	d901      	bls.n	800586a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e006      	b.n	8005878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d0f0      	beq.n	8005858 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058a4:	4313      	orrs	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b087      	sub	sp, #28
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0306 	and.w	r3, r3, #6
 80058ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]
 80058da:	e00a      	b.n	80058f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d002      	beq.n	80058e8 <USB_GetDevSpeed+0x32>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d102      	bne.n	80058ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058e8:	2302      	movs	r3, #2
 80058ea:	75fb      	strb	r3, [r7, #23]
 80058ec:	e001      	b.n	80058f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058ee:	230f      	movs	r3, #15
 80058f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d13a      	bne.n	8005992 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	2101      	movs	r1, #1
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	b29b      	uxth	r3, r3
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800593a:	4313      	orrs	r3, r2
 800593c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d155      	bne.n	8005a00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	791b      	ldrb	r3, [r3, #4]
 800596e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005970:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	059b      	lsls	r3, r3, #22
 8005976:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005978:	4313      	orrs	r3, r2
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e036      	b.n	8005a00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	2101      	movs	r1, #1
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11a      	bne.n	8005a00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	791b      	ldrb	r3, [r3, #4]
 80059e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059e6:	430b      	orrs	r3, r1
 80059e8:	4313      	orrs	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d161      	bne.n	8005af0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a42:	d11f      	bne.n	8005a84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	2101      	movs	r1, #1
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	0159      	lsls	r1, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	440b      	add	r3, r1
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4b35      	ldr	r3, [pc, #212]	@ (8005bc0 <USB_DeactivateEndpoint+0x1b0>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	600b      	str	r3, [r1, #0]
 8005aee:	e060      	b.n	8005bb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b06:	d11f      	bne.n	8005b48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	041b      	lsls	r3, r3, #16
 8005b60:	43db      	mvns	r3, r3
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b68:	4013      	ands	r3, r2
 8005b6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	43db      	mvns	r3, r3
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	0159      	lsls	r1, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005baa:	4619      	mov	r1, r3
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <USB_DeactivateEndpoint+0x1b4>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	ec337800 	.word	0xec337800
 8005bc4:	eff37800 	.word	0xeff37800

08005bc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	@ 0x28
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	f040 817f 	bne.w	8005ee8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d132      	bne.n	8005c58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c50:	0cdb      	lsrs	r3, r3, #19
 8005c52:	04db      	lsls	r3, r3, #19
 8005c54:	6113      	str	r3, [r2, #16]
 8005c56:	e097      	b.n	8005d88 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c72:	0cdb      	lsrs	r3, r3, #19
 8005c74:	04db      	lsls	r3, r3, #19
 8005c76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11a      	bne.n	8005cd8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d903      	bls.n	8005cb6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
 8005cd6:	e044      	b.n	8005d62 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	1e5a      	subs	r2, r3, #1
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	8afb      	ldrh	r3, [r7, #22]
 8005cfe:	04d9      	lsls	r1, r3, #19
 8005d00:	4ba4      	ldr	r3, [pc, #656]	@ (8005f94 <USB_EPStartXfer+0x3cc>)
 8005d02:	400b      	ands	r3, r1
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	0148      	lsls	r0, r1, #5
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d10:	4313      	orrs	r3, r2
 8005d12:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	791b      	ldrb	r3, [r3, #4]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d122      	bne.n	8005d62 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d36:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005d3a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	8afb      	ldrh	r3, [r7, #22]
 8005d4c:	075b      	lsls	r3, r3, #29
 8005d4e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	0148      	lsls	r0, r1, #5
 8005d56:	69f9      	ldr	r1, [r7, #28]
 8005d58:	4401      	add	r1, r0
 8005d5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d78:	69b9      	ldr	r1, [r7, #24]
 8005d7a:	0148      	lsls	r0, r1, #5
 8005d7c:	69f9      	ldr	r1, [r7, #28]
 8005d7e:	4401      	add	r1, r0
 8005d80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d84:	4313      	orrs	r3, r2
 8005d86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d14b      	bne.n	8005e26 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da2:	461a      	mov	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	791b      	ldrb	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d128      	bne.n	8005e04 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d110      	bne.n	8005de4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ddc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e00f      	b.n	8005e04 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e02:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	e166      	b.n	80060f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e44:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	791b      	ldrb	r3, [r3, #4]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d015      	beq.n	8005e7a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 814e 	beq.w	80060f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	2101      	movs	r1, #1
 8005e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6e:	69f9      	ldr	r1, [r7, #28]
 8005e70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e74:	4313      	orrs	r3, r2
 8005e76:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e78:	e13c      	b.n	80060f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d110      	bne.n	8005eac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	e00f      	b.n	8005ecc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	68d9      	ldr	r1, [r3, #12]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	b298      	uxth	r0, r3
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4603      	mov	r3, r0
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f9b9 	bl	8006258 <USB_WritePacket>
 8005ee6:	e105      	b.n	80060f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f02:	0cdb      	lsrs	r3, r3, #19
 8005f04:	04db      	lsls	r3, r3, #19
 8005f06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f22:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f26:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f2a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d132      	bne.n	8005f98 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f60:	69b9      	ldr	r1, [r7, #24]
 8005f62:	0148      	lsls	r0, r1, #5
 8005f64:	69f9      	ldr	r1, [r7, #28]
 8005f66:	4401      	add	r1, r0
 8005f68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f8e:	6113      	str	r3, [r2, #16]
 8005f90:	e062      	b.n	8006058 <USB_EPStartXfer+0x490>
 8005f92:	bf00      	nop
 8005f94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d123      	bne.n	8005fe8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb6:	69b9      	ldr	r1, [r7, #24]
 8005fb8:	0148      	lsls	r0, r1, #5
 8005fba:	69f9      	ldr	r1, [r7, #28]
 8005fbc:	4401      	add	r1, r0
 8005fbe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fe4:	6113      	str	r3, [r2, #16]
 8005fe6:	e037      	b.n	8006058 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	1e5a      	subs	r2, r3, #1
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	8afa      	ldrh	r2, [r7, #22]
 8006004:	fb03 f202 	mul.w	r2, r3, r2
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	8afb      	ldrh	r3, [r7, #22]
 800601c:	04d9      	lsls	r1, r3, #19
 800601e:	4b38      	ldr	r3, [pc, #224]	@ (8006100 <USB_EPStartXfer+0x538>)
 8006020:	400b      	ands	r3, r1
 8006022:	69b9      	ldr	r1, [r7, #24]
 8006024:	0148      	lsls	r0, r1, #5
 8006026:	69f9      	ldr	r1, [r7, #28]
 8006028:	4401      	add	r1, r0
 800602a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800602e:	4313      	orrs	r3, r2
 8006030:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006048:	69b9      	ldr	r1, [r7, #24]
 800604a:	0148      	lsls	r0, r1, #5
 800604c:	69f9      	ldr	r1, [r7, #28]
 800604e:	4401      	add	r1, r0
 8006050:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006054:	4313      	orrs	r3, r2
 8006056:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10d      	bne.n	800607a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68d9      	ldr	r1, [r3, #12]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006076:	460a      	mov	r2, r1
 8006078:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	791b      	ldrb	r3, [r3, #4]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d128      	bne.n	80060d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d110      	bne.n	80060b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e00f      	b.n	80060d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	1ff80000 	.word	0x1ff80000

08006104 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d14a      	bne.n	80061b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800613a:	f040 8086 	bne.w	800624a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006160:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006184:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006192:	4293      	cmp	r3, r2
 8006194:	d902      	bls.n	800619c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
          break;
 800619a:	e056      	b.n	800624a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061b4:	d0e7      	beq.n	8006186 <USB_EPStopXfer+0x82>
 80061b6:	e048      	b.n	800624a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061d0:	d13b      	bne.n	800624a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	7812      	ldrb	r2, [r2, #0]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006214:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006218:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3301      	adds	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006226:	4293      	cmp	r3, r2
 8006228:	d902      	bls.n	8006230 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	75fb      	strb	r3, [r7, #23]
          break;
 800622e:	e00c      	b.n	800624a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006248:	d0e7      	beq.n	800621a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
}
 800624c:	4618      	mov	r0, r3
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	@ 0x24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4611      	mov	r1, r2
 8006264:	461a      	mov	r2, r3
 8006266:	460b      	mov	r3, r1
 8006268:	71fb      	strb	r3, [r7, #7]
 800626a:	4613      	mov	r3, r2
 800626c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006276:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d123      	bne.n	80062c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800627e:	88bb      	ldrh	r3, [r7, #4]
 8006280:	3303      	adds	r3, #3
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e018      	b.n	80062be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	031a      	lsls	r2, r3, #12
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006298:	461a      	mov	r2, r3
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3301      	adds	r3, #1
 80062b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d3e2      	bcc.n	800628c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3724      	adds	r7, #36	@ 0x24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b08b      	sub	sp, #44	@ 0x2c
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	e014      	b.n	800632a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	601a      	str	r2, [r3, #0]
    pDest++;
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	3301      	adds	r3, #1
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	3301      	adds	r3, #1
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	3301      	adds	r3, #1
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	3301      	adds	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	3301      	adds	r3, #1
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	6a3a      	ldr	r2, [r7, #32]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	429a      	cmp	r2, r3
 8006330:	d3e6      	bcc.n	8006300 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006332:	8bfb      	ldrh	r3, [r7, #30]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d01e      	beq.n	8006376 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006342:	461a      	mov	r2, r3
 8006344:	f107 0310 	add.w	r3, r7, #16
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
 8006358:	b2da      	uxtb	r2, r3
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	701a      	strb	r2, [r3, #0]
      i++;
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	3301      	adds	r3, #1
 8006362:	623b      	str	r3, [r7, #32]
      pDest++;
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	3301      	adds	r3, #1
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800636a:	8bfb      	ldrh	r3, [r7, #30]
 800636c:	3b01      	subs	r3, #1
 800636e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006370:	8bfb      	ldrh	r3, [r7, #30]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ea      	bne.n	800634c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006378:	4618      	mov	r0, r3
 800637a:	372c      	adds	r7, #44	@ 0x2c
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d12c      	bne.n	80063fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	db12      	blt.n	80063d8 <USB_EPSetStall+0x54>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00f      	beq.n	80063d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	e02b      	b.n	8006452 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	db12      	blt.n	8006432 <USB_EPSetStall+0xae>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00f      	beq.n	8006432 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800642c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006430:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800644c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006450:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d128      	bne.n	80064ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006496:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800649a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	791b      	ldrb	r3, [r3, #4]
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d003      	beq.n	80064ac <USB_EPClearStall+0x4c>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	791b      	ldrb	r3, [r3, #4]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d138      	bne.n	800651e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	0151      	lsls	r1, r2, #5
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	440a      	add	r2, r1
 80064c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	e027      	b.n	800651e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	791b      	ldrb	r3, [r3, #4]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d003      	beq.n	80064fe <USB_EPClearStall+0x9e>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	791b      	ldrb	r3, [r3, #4]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d10f      	bne.n	800651e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	440a      	add	r2, r1
 8006514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800651c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800654a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800654e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006560:	68f9      	ldr	r1, [r7, #12]
 8006562:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065a6:	f023 0302 	bic.w	r3, r3, #2
 80065aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065d4:	f023 0303 	bic.w	r3, r3, #3
 80065d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065e8:	f043 0302 	orr.w	r3, r3, #2
 80065ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4013      	ands	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006614:	68fb      	ldr	r3, [r7, #12]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	4013      	ands	r3, r2
 8006644:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	0c1b      	lsrs	r3, r3, #16
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	4013      	ands	r3, r2
 8006678:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	b29b      	uxth	r3, r3
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4013      	ands	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066b8:	68bb      	ldr	r3, [r7, #8]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b087      	sub	sp, #28
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	fa22 f303 	lsr.w	r3, r2, r3
 80066f6:	01db      	lsls	r3, r3, #7
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4013      	ands	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006714:	68bb      	ldr	r3, [r7, #8]
}
 8006716:	4618      	mov	r0, r3
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	f003 0301 	and.w	r3, r3, #1
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006758:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800675c:	f023 0307 	bic.w	r3, r3, #7
 8006760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	460b      	mov	r3, r1
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	333c      	adds	r3, #60	@ 0x3c
 800679a:	3304      	adds	r3, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4a26      	ldr	r2, [pc, #152]	@ (800683c <USB_EP0_OutStart+0xb8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d90a      	bls.n	80067be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067b8:	d101      	bne.n	80067be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e037      	b.n	800682e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ec:	f043 0318 	orr.w	r3, r3, #24
 80067f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006800:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006804:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006806:	7afb      	ldrb	r3, [r7, #11]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d10f      	bne.n	800682c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006812:	461a      	mov	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006826:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800682a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	4f54300a 	.word	0x4f54300a

08006840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006858:	d901      	bls.n	800685e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e01b      	b.n	8006896 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	daf2      	bge.n	800684c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f043 0201 	orr.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006882:	d901      	bls.n	8006888 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e006      	b.n	8006896 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	d0f0      	beq.n	8006876 <USB_CoreReset+0x36>

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
	...

080068a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80068b4:	f7fa fd20 	bl	80012f8 <USBD_static_malloc>
 80068b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	32b0      	adds	r2, #176	@ 0xb0
 80068ca:	2100      	movs	r1, #0
 80068cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068d0:	2302      	movs	r3, #2
 80068d2:	e0d4      	b.n	8006a7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80068d8:	2100      	movs	r1, #0
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f001 ff74 	bl	80087c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	32b0      	adds	r2, #176	@ 0xb0
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	32b0      	adds	r2, #176	@ 0xb0
 80068fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	7c1b      	ldrb	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d138      	bne.n	800697e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800690c:	4b5e      	ldr	r3, [pc, #376]	@ (8006a88 <USBD_CDC_Init+0x1e4>)
 800690e:	7819      	ldrb	r1, [r3, #0]
 8006910:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006914:	2202      	movs	r2, #2
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fa fbcb 	bl	80010b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800691c:	4b5a      	ldr	r3, [pc, #360]	@ (8006a88 <USBD_CDC_Init+0x1e4>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 020f 	and.w	r2, r3, #15
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	3324      	adds	r3, #36	@ 0x24
 8006932:	2201      	movs	r2, #1
 8006934:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006936:	4b55      	ldr	r3, [pc, #340]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 8006938:	7819      	ldrb	r1, [r3, #0]
 800693a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800693e:	2202      	movs	r2, #2
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fa fbb6 	bl	80010b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006946:	4b51      	ldr	r3, [pc, #324]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f003 020f 	and.w	r2, r3, #15
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800695e:	2201      	movs	r2, #1
 8006960:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006962:	4b4b      	ldr	r3, [pc, #300]	@ (8006a90 <USBD_CDC_Init+0x1ec>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 020f 	and.w	r2, r3, #15
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	3326      	adds	r3, #38	@ 0x26
 8006978:	2210      	movs	r2, #16
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	e035      	b.n	80069ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800697e:	4b42      	ldr	r3, [pc, #264]	@ (8006a88 <USBD_CDC_Init+0x1e4>)
 8006980:	7819      	ldrb	r1, [r3, #0]
 8006982:	2340      	movs	r3, #64	@ 0x40
 8006984:	2202      	movs	r2, #2
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fa fb93 	bl	80010b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800698c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a88 <USBD_CDC_Init+0x1e4>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 020f 	and.w	r2, r3, #15
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	3324      	adds	r3, #36	@ 0x24
 80069a2:	2201      	movs	r2, #1
 80069a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069a6:	4b39      	ldr	r3, [pc, #228]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 80069a8:	7819      	ldrb	r1, [r3, #0]
 80069aa:	2340      	movs	r3, #64	@ 0x40
 80069ac:	2202      	movs	r2, #2
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fa fb7f 	bl	80010b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069b4:	4b35      	ldr	r3, [pc, #212]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 020f 	and.w	r2, r3, #15
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069cc:	2201      	movs	r2, #1
 80069ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006a90 <USBD_CDC_Init+0x1ec>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3326      	adds	r3, #38	@ 0x26
 80069e6:	2210      	movs	r2, #16
 80069e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069ea:	4b29      	ldr	r3, [pc, #164]	@ (8006a90 <USBD_CDC_Init+0x1ec>)
 80069ec:	7819      	ldrb	r1, [r3, #0]
 80069ee:	2308      	movs	r3, #8
 80069f0:	2203      	movs	r2, #3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fa fb5d 	bl	80010b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069f8:	4b25      	ldr	r3, [pc, #148]	@ (8006a90 <USBD_CDC_Init+0x1ec>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	3324      	adds	r3, #36	@ 0x24
 8006a0e:	2201      	movs	r2, #1
 8006a10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	33b0      	adds	r3, #176	@ 0xb0
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e018      	b.n	8006a7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	7c1b      	ldrb	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a54:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 8006a56:	7819      	ldrb	r1, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fa fc14 	bl	8001290 <USBD_LL_PrepareReceive>
 8006a68:	e008      	b.n	8006a7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a6a:	4b08      	ldr	r3, [pc, #32]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 8006a6c:	7819      	ldrb	r1, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a74:	2340      	movs	r3, #64	@ 0x40
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fa fc0a 	bl	8001290 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	200000f7 	.word	0x200000f7
 8006a8c:	200000f8 	.word	0x200000f8
 8006a90:	200000f9 	.word	0x200000f9

08006a94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8006b8c <USBD_CDC_DeInit+0xf8>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fa fb29 	bl	80010fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006aac:	4b37      	ldr	r3, [pc, #220]	@ (8006b8c <USBD_CDC_DeInit+0xf8>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f003 020f 	and.w	r2, r3, #15
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3324      	adds	r3, #36	@ 0x24
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ac6:	4b32      	ldr	r3, [pc, #200]	@ (8006b90 <USBD_CDC_DeInit+0xfc>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fa fb16 	bl	80010fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8006b90 <USBD_CDC_DeInit+0xfc>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006aea:	2200      	movs	r2, #0
 8006aec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006aee:	4b29      	ldr	r3, [pc, #164]	@ (8006b94 <USBD_CDC_DeInit+0x100>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fa fb02 	bl	80010fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006afa:	4b26      	ldr	r3, [pc, #152]	@ (8006b94 <USBD_CDC_DeInit+0x100>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	f003 020f 	and.w	r2, r3, #15
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3324      	adds	r3, #36	@ 0x24
 8006b10:	2200      	movs	r2, #0
 8006b12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b14:	4b1f      	ldr	r3, [pc, #124]	@ (8006b94 <USBD_CDC_DeInit+0x100>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3326      	adds	r3, #38	@ 0x26
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	32b0      	adds	r2, #176	@ 0xb0
 8006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01f      	beq.n	8006b80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	33b0      	adds	r3, #176	@ 0xb0
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	32b0      	adds	r2, #176	@ 0xb0
 8006b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa fbd6 	bl	8001314 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	32b0      	adds	r2, #176	@ 0xb0
 8006b72:	2100      	movs	r1, #0
 8006b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200000f7 	.word	0x200000f7
 8006b90:	200000f8 	.word	0x200000f8
 8006b94:	200000f9 	.word	0x200000f9

08006b98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32b0      	adds	r2, #176	@ 0xb0
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e0bf      	b.n	8006d48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d050      	beq.n	8006c76 <USBD_CDC_Setup+0xde>
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	f040 80af 	bne.w	8006d38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	88db      	ldrh	r3, [r3, #6]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d03a      	beq.n	8006c58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	b25b      	sxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	da1b      	bge.n	8006c24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	33b0      	adds	r3, #176	@ 0xb0
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	88d2      	ldrh	r2, [r2, #6]
 8006c08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	88db      	ldrh	r3, [r3, #6]
 8006c0e:	2b07      	cmp	r3, #7
 8006c10:	bf28      	it	cs
 8006c12:	2307      	movcs	r3, #7
 8006c14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	89fa      	ldrh	r2, [r7, #14]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fd53 	bl	80086c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c22:	e090      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785a      	ldrb	r2, [r3, #1]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c34:	d803      	bhi.n	8006c3e <USBD_CDC_Setup+0xa6>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	88db      	ldrh	r3, [r3, #6]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	e000      	b.n	8006c40 <USBD_CDC_Setup+0xa8>
 8006c3e:	2240      	movs	r2, #64	@ 0x40
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c46:	6939      	ldr	r1, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fd65 	bl	8008720 <USBD_CtlPrepareRx>
      break;
 8006c56:	e076      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	33b0      	adds	r3, #176	@ 0xb0
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	7850      	ldrb	r0, [r2, #1]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	4798      	blx	r3
      break;
 8006c74:	e067      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	2b0b      	cmp	r3, #11
 8006c7c:	d851      	bhi.n	8006d22 <USBD_CDC_Setup+0x18a>
 8006c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c84 <USBD_CDC_Setup+0xec>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006cb5 	.word	0x08006cb5
 8006c88:	08006d31 	.word	0x08006d31
 8006c8c:	08006d23 	.word	0x08006d23
 8006c90:	08006d23 	.word	0x08006d23
 8006c94:	08006d23 	.word	0x08006d23
 8006c98:	08006d23 	.word	0x08006d23
 8006c9c:	08006d23 	.word	0x08006d23
 8006ca0:	08006d23 	.word	0x08006d23
 8006ca4:	08006d23 	.word	0x08006d23
 8006ca8:	08006d23 	.word	0x08006d23
 8006cac:	08006cdf 	.word	0x08006cdf
 8006cb0:	08006d09 	.word	0x08006d09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d107      	bne.n	8006cd0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cc0:	f107 030a 	add.w	r3, r7, #10
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fcfd 	bl	80086c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cce:	e032      	b.n	8006d36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 fc7b 	bl	80085ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	75fb      	strb	r3, [r7, #23]
          break;
 8006cdc:	e02b      	b.n	8006d36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d107      	bne.n	8006cfa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cea:	f107 030d 	add.w	r3, r7, #13
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fce8 	bl	80086c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cf8:	e01d      	b.n	8006d36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fc66 	bl	80085ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006d02:	2303      	movs	r3, #3
 8006d04:	75fb      	strb	r3, [r7, #23]
          break;
 8006d06:	e016      	b.n	8006d36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d00f      	beq.n	8006d34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fc59 	bl	80085ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d20:	e008      	b.n	8006d34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fc52 	bl	80085ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d2e:	e002      	b.n	8006d36 <USBD_CDC_Setup+0x19e>
          break;
 8006d30:	bf00      	nop
 8006d32:	e008      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>
          break;
 8006d34:	bf00      	nop
      }
      break;
 8006d36:	e006      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fc47 	bl	80085ce <USBD_CtlError>
      ret = USBD_FAIL;
 8006d40:	2303      	movs	r3, #3
 8006d42:	75fb      	strb	r3, [r7, #23]
      break;
 8006d44:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	32b0      	adds	r2, #176	@ 0xb0
 8006d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e065      	b.n	8006e46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	32b0      	adds	r2, #176	@ 0xb0
 8006d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	f003 020f 	and.w	r2, r3, #15
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3318      	adds	r3, #24
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02f      	beq.n	8006e04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	3318      	adds	r3, #24
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	f003 010f 	and.w	r1, r3, #15
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	440b      	add	r3, r1
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4403      	add	r3, r0
 8006dcc:	331c      	adds	r3, #28
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d112      	bne.n	8006e04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	f003 020f 	and.w	r2, r3, #15
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	3318      	adds	r3, #24
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006df6:	78f9      	ldrb	r1, [r7, #3]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fa fa26 	bl	800124e <USBD_LL_Transmit>
 8006e02:	e01f      	b.n	8006e44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	33b0      	adds	r3, #176	@ 0xb0
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d010      	beq.n	8006e44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	33b0      	adds	r3, #176	@ 0xb0
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006e40:	78fa      	ldrb	r2, [r7, #3]
 8006e42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	32b0      	adds	r2, #176	@ 0xb0
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	32b0      	adds	r2, #176	@ 0xb0
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e01a      	b.n	8006eb6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fa fa24 	bl	80012d2 <USBD_LL_GetRxDataSize>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	33b0      	adds	r3, #176	@ 0xb0
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	32b0      	adds	r2, #176	@ 0xb0
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e024      	b.n	8006f2a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	33b0      	adds	r3, #176	@ 0xb0
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d019      	beq.n	8006f28 <USBD_CDC_EP0_RxReady+0x6a>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006efa:	2bff      	cmp	r3, #255	@ 0xff
 8006efc:	d014      	beq.n	8006f28 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	33b0      	adds	r3, #176	@ 0xb0
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	22ff      	movs	r2, #255	@ 0xff
 8006f24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f3c:	2182      	movs	r1, #130	@ 0x82
 8006f3e:	4818      	ldr	r0, [pc, #96]	@ (8006fa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f40:	f000 fd0f 	bl	8007962 <USBD_GetEpDesc>
 8006f44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f46:	2101      	movs	r1, #1
 8006f48:	4815      	ldr	r0, [pc, #84]	@ (8006fa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f4a:	f000 fd0a 	bl	8007962 <USBD_GetEpDesc>
 8006f4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f50:	2181      	movs	r1, #129	@ 0x81
 8006f52:	4813      	ldr	r0, [pc, #76]	@ (8006fa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f54:	f000 fd05 	bl	8007962 <USBD_GetEpDesc>
 8006f58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2210      	movs	r2, #16
 8006f64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d006      	beq.n	8006f7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f74:	711a      	strb	r2, [r3, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d006      	beq.n	8006f8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f88:	711a      	strb	r2, [r3, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2243      	movs	r2, #67	@ 0x43
 8006f92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f94:	4b02      	ldr	r3, [pc, #8]	@ (8006fa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200000b4 	.word	0x200000b4

08006fa4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fac:	2182      	movs	r1, #130	@ 0x82
 8006fae:	4818      	ldr	r0, [pc, #96]	@ (8007010 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fb0:	f000 fcd7 	bl	8007962 <USBD_GetEpDesc>
 8006fb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	4815      	ldr	r0, [pc, #84]	@ (8007010 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fba:	f000 fcd2 	bl	8007962 <USBD_GetEpDesc>
 8006fbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fc0:	2181      	movs	r1, #129	@ 0x81
 8006fc2:	4813      	ldr	r0, [pc, #76]	@ (8007010 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fc4:	f000 fccd 	bl	8007962 <USBD_GetEpDesc>
 8006fc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d006      	beq.n	8006fea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	711a      	strb	r2, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f042 0202 	orr.w	r2, r2, #2
 8006fe8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	711a      	strb	r2, [r3, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f042 0202 	orr.w	r2, r2, #2
 8006ffc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2243      	movs	r2, #67	@ 0x43
 8007002:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007004:	4b02      	ldr	r3, [pc, #8]	@ (8007010 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	200000b4 	.word	0x200000b4

08007014 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800701c:	2182      	movs	r1, #130	@ 0x82
 800701e:	4818      	ldr	r0, [pc, #96]	@ (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007020:	f000 fc9f 	bl	8007962 <USBD_GetEpDesc>
 8007024:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007026:	2101      	movs	r1, #1
 8007028:	4815      	ldr	r0, [pc, #84]	@ (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800702a:	f000 fc9a 	bl	8007962 <USBD_GetEpDesc>
 800702e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007030:	2181      	movs	r1, #129	@ 0x81
 8007032:	4813      	ldr	r0, [pc, #76]	@ (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007034:	f000 fc95 	bl	8007962 <USBD_GetEpDesc>
 8007038:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2210      	movs	r2, #16
 8007044:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2200      	movs	r2, #0
 8007050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007054:	711a      	strb	r2, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d006      	beq.n	800706e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007068:	711a      	strb	r2, [r3, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2243      	movs	r2, #67	@ 0x43
 8007072:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007074:	4b02      	ldr	r3, [pc, #8]	@ (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200000b4 	.word	0x200000b4

08007084 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	220a      	movs	r2, #10
 8007090:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007092:	4b03      	ldr	r3, [pc, #12]	@ (80070a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	20000070 	.word	0x20000070

080070a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e009      	b.n	80070cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	33b0      	adds	r3, #176	@ 0xb0
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	32b0      	adds	r2, #176	@ 0xb0
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e008      	b.n	8007110 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	32b0      	adds	r2, #176	@ 0xb0
 8007130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007134:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	e004      	b.n	800714a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
	...

08007158 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	32b0      	adds	r2, #176	@ 0xb0
 800716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	32b0      	adds	r2, #176	@ 0xb0
 800717a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007182:	2303      	movs	r3, #3
 8007184:	e018      	b.n	80071b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7c1b      	ldrb	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800718e:	4b0c      	ldr	r3, [pc, #48]	@ (80071c0 <USBD_CDC_ReceivePacket+0x68>)
 8007190:	7819      	ldrb	r1, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7fa f877 	bl	8001290 <USBD_LL_PrepareReceive>
 80071a2:	e008      	b.n	80071b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071a4:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <USBD_CDC_ReceivePacket+0x68>)
 80071a6:	7819      	ldrb	r1, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071ae:	2340      	movs	r3, #64	@ 0x40
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fa f86d 	bl	8001290 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	200000f8 	.word	0x200000f8

080071c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	e01f      	b.n	800721c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	79fa      	ldrb	r2, [r7, #7]
 800720e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7f9 fee7 	bl	8000fe4 <USBD_LL_Init>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]

  return ret;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	e025      	b.n	8007288 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	32ae      	adds	r2, #174	@ 0xae
 800724e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00f      	beq.n	8007278 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	32ae      	adds	r2, #174	@ 0xae
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007268:	f107 020e 	add.w	r2, r7, #14
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	4602      	mov	r2, r0
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7f9 feef 	bl	800107c <USBD_LL_Start>
 800729e:	4603      	mov	r3, r0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	460b      	mov	r3, r1
 80072c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d009      	beq.n	80072ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	4611      	mov	r1, r2
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	460b      	mov	r3, r1
 8007300:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	78fa      	ldrb	r2, [r7, #3]
 8007310:	4611      	mov	r1, r2
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f001 f90c 	bl	800855a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007350:	461a      	mov	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	2b02      	cmp	r3, #2
 8007364:	d01a      	beq.n	800739c <USBD_LL_SetupStage+0x72>
 8007366:	2b02      	cmp	r3, #2
 8007368:	d822      	bhi.n	80073b0 <USBD_LL_SetupStage+0x86>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <USBD_LL_SetupStage+0x4a>
 800736e:	2b01      	cmp	r3, #1
 8007370:	d00a      	beq.n	8007388 <USBD_LL_SetupStage+0x5e>
 8007372:	e01d      	b.n	80073b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb63 	bl	8007a48 <USBD_StdDevReq>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
      break;
 8007386:	e020      	b.n	80073ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fbcb 	bl	8007b2c <USBD_StdItfReq>
 8007396:	4603      	mov	r3, r0
 8007398:	73fb      	strb	r3, [r7, #15]
      break;
 800739a:	e016      	b.n	80073ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc2d 	bl	8007c04 <USBD_StdEPReq>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
      break;
 80073ae:	e00c      	b.n	80073ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7f9 febc 	bl	800113c <USBD_LL_StallEP>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	bf00      	nop
  }

  return ret;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	460b      	mov	r3, r1
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d16e      	bne.n	80074ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80073f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	f040 8098 	bne.w	8007530 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	429a      	cmp	r2, r3
 800740a:	d913      	bls.n	8007434 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	1ad2      	subs	r2, r2, r3
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4293      	cmp	r3, r2
 8007424:	bf28      	it	cs
 8007426:	4613      	movcs	r3, r2
 8007428:	461a      	mov	r2, r3
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f001 f994 	bl	800875a <USBD_CtlContinueRx>
 8007432:	e07d      	b.n	8007530 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2b02      	cmp	r3, #2
 8007440:	d014      	beq.n	800746c <USBD_LL_DataOutStage+0x98>
 8007442:	2b02      	cmp	r3, #2
 8007444:	d81d      	bhi.n	8007482 <USBD_LL_DataOutStage+0xae>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <USBD_LL_DataOutStage+0x7c>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d003      	beq.n	8007456 <USBD_LL_DataOutStage+0x82>
 800744e:	e018      	b.n	8007482 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	75bb      	strb	r3, [r7, #22]
            break;
 8007454:	e018      	b.n	8007488 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800745c:	b2db      	uxtb	r3, r3
 800745e:	4619      	mov	r1, r3
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fa64 	bl	800792e <USBD_CoreFindIF>
 8007466:	4603      	mov	r3, r0
 8007468:	75bb      	strb	r3, [r7, #22]
            break;
 800746a:	e00d      	b.n	8007488 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4619      	mov	r1, r3
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fa66 	bl	8007948 <USBD_CoreFindEP>
 800747c:	4603      	mov	r3, r0
 800747e:	75bb      	strb	r3, [r7, #22]
            break;
 8007480:	e002      	b.n	8007488 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	75bb      	strb	r3, [r7, #22]
            break;
 8007486:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007488:	7dbb      	ldrb	r3, [r7, #22]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d119      	bne.n	80074c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b03      	cmp	r3, #3
 8007498:	d113      	bne.n	80074c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800749a:	7dba      	ldrb	r2, [r7, #22]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	32ae      	adds	r2, #174	@ 0xae
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80074aa:	7dba      	ldrb	r2, [r7, #22]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074b2:	7dba      	ldrb	r2, [r7, #22]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	32ae      	adds	r2, #174	@ 0xae
 80074b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f001 f95a 	bl	800877c <USBD_CtlSendStatus>
 80074c8:	e032      	b.n	8007530 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80074ca:	7afb      	ldrb	r3, [r7, #11]
 80074cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	4619      	mov	r1, r3
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fa37 	bl	8007948 <USBD_CoreFindEP>
 80074da:	4603      	mov	r3, r0
 80074dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074de:	7dbb      	ldrb	r3, [r7, #22]
 80074e0:	2bff      	cmp	r3, #255	@ 0xff
 80074e2:	d025      	beq.n	8007530 <USBD_LL_DataOutStage+0x15c>
 80074e4:	7dbb      	ldrb	r3, [r7, #22]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d122      	bne.n	8007530 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d117      	bne.n	8007526 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074f6:	7dba      	ldrb	r2, [r7, #22]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	32ae      	adds	r2, #174	@ 0xae
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007506:	7dba      	ldrb	r2, [r7, #22]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800750e:	7dba      	ldrb	r2, [r7, #22]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	32ae      	adds	r2, #174	@ 0xae
 8007514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	7afa      	ldrb	r2, [r7, #11]
 800751c:	4611      	mov	r1, r2
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	4798      	blx	r3
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	e000      	b.n	8007532 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b086      	sub	sp, #24
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	460b      	mov	r3, r1
 8007544:	607a      	str	r2, [r7, #4]
 8007546:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d16f      	bne.n	800762e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3314      	adds	r3, #20
 8007552:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800755a:	2b02      	cmp	r3, #2
 800755c:	d15a      	bne.n	8007614 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	429a      	cmp	r2, r3
 8007568:	d914      	bls.n	8007594 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	461a      	mov	r2, r3
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 f8bc 	bl	80086fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007586:	2300      	movs	r3, #0
 8007588:	2200      	movs	r2, #0
 800758a:	2100      	movs	r1, #0
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7f9 fe7f 	bl	8001290 <USBD_LL_PrepareReceive>
 8007592:	e03f      	b.n	8007614 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	429a      	cmp	r2, r3
 800759e:	d11c      	bne.n	80075da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d316      	bcc.n	80075da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d20f      	bcs.n	80075da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075ba:	2200      	movs	r2, #0
 80075bc:	2100      	movs	r1, #0
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f001 f89d 	bl	80086fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075cc:	2300      	movs	r3, #0
 80075ce:	2200      	movs	r2, #0
 80075d0:	2100      	movs	r1, #0
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7f9 fe5c 	bl	8001290 <USBD_LL_PrepareReceive>
 80075d8:	e01c      	b.n	8007614 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d10f      	bne.n	8007606 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007606:	2180      	movs	r1, #128	@ 0x80
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7f9 fd97 	bl	800113c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f001 f8c7 	bl	80087a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d03a      	beq.n	8007694 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f7ff fe42 	bl	80072a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800762c:	e032      	b.n	8007694 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800762e:	7afb      	ldrb	r3, [r7, #11]
 8007630:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007634:	b2db      	uxtb	r3, r3
 8007636:	4619      	mov	r1, r3
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f985 	bl	8007948 <USBD_CoreFindEP>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2bff      	cmp	r3, #255	@ 0xff
 8007646:	d025      	beq.n	8007694 <USBD_LL_DataInStage+0x15a>
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d122      	bne.n	8007694 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b03      	cmp	r3, #3
 8007658:	d11c      	bne.n	8007694 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800765a:	7dfa      	ldrb	r2, [r7, #23]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	32ae      	adds	r2, #174	@ 0xae
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d014      	beq.n	8007694 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800766a:	7dfa      	ldrb	r2, [r7, #23]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007672:	7dfa      	ldrb	r2, [r7, #23]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	32ae      	adds	r2, #174	@ 0xae
 8007678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	7afa      	ldrb	r2, [r7, #11]
 8007680:	4611      	mov	r1, r2
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	4798      	blx	r3
 8007686:	4603      	mov	r3, r0
 8007688:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800768a:	7dbb      	ldrb	r3, [r7, #22]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007690:	7dbb      	ldrb	r3, [r7, #22]
 8007692:	e000      	b.n	8007696 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d014      	beq.n	8007704 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00e      	beq.n	8007704 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6852      	ldr	r2, [r2, #4]
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	4611      	mov	r1, r2
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007704:	2340      	movs	r3, #64	@ 0x40
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7f9 fcd1 	bl	80010b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2240      	movs	r2, #64	@ 0x40
 800771c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007720:	2340      	movs	r3, #64	@ 0x40
 8007722:	2200      	movs	r2, #0
 8007724:	2180      	movs	r1, #128	@ 0x80
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7f9 fcc3 	bl	80010b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2240      	movs	r2, #64	@ 0x40
 8007736:	621a      	str	r2, [r3, #32]

  return ret;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b04      	cmp	r3, #4
 8007774:	d006      	beq.n	8007784 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800777c:	b2da      	uxtb	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2204      	movs	r2, #4
 8007788:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d106      	bne.n	80077bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d110      	bne.n	8007800 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	32ae      	adds	r2, #174	@ 0xae
 8007820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007828:	2303      	movs	r3, #3
 800782a:	e01c      	b.n	8007866 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b03      	cmp	r3, #3
 8007836:	d115      	bne.n	8007864 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	32ae      	adds	r2, #174	@ 0xae
 8007842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	32ae      	adds	r2, #174	@ 0xae
 8007856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	4611      	mov	r1, r2
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	32ae      	adds	r2, #174	@ 0xae
 8007884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800788c:	2303      	movs	r3, #3
 800788e:	e01c      	b.n	80078ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b03      	cmp	r3, #3
 800789a:	d115      	bne.n	80078c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	32ae      	adds	r2, #174	@ 0xae
 80078a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	32ae      	adds	r2, #174	@ 0xae
 80078ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	4611      	mov	r1, r2
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00e      	beq.n	8007924 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6852      	ldr	r2, [r2, #4]
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	4611      	mov	r1, r2
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	460b      	mov	r3, r1
 8007938:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800793a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007954:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	885b      	ldrh	r3, [r3, #2]
 800797e:	b29b      	uxth	r3, r3
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	7812      	ldrb	r2, [r2, #0]
 8007984:	4293      	cmp	r3, r2
 8007986:	d91f      	bls.n	80079c8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800798e:	e013      	b.n	80079b8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007990:	f107 030a 	add.w	r3, r7, #10
 8007994:	4619      	mov	r1, r3
 8007996:	6978      	ldr	r0, [r7, #20]
 8007998:	f000 f81b 	bl	80079d2 <USBD_GetNextDesc>
 800799c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	d108      	bne.n	80079b8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	789b      	ldrb	r3, [r3, #2]
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d008      	beq.n	80079c6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	885b      	ldrh	r3, [r3, #2]
 80079bc:	b29a      	uxth	r2, r3
 80079be:	897b      	ldrh	r3, [r7, #10]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d8e5      	bhi.n	8007990 <USBD_GetEpDesc+0x2e>
 80079c4:	e000      	b.n	80079c8 <USBD_GetEpDesc+0x66>
          break;
 80079c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80079c8:	693b      	ldr	r3, [r7, #16]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	7812      	ldrb	r2, [r2, #0]
 80079e8:	4413      	add	r3, r2
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a28:	8a3b      	ldrh	r3, [r7, #16]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	b21a      	sxth	r2, r3
 8007a2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	b21b      	sxth	r3, r3
 8007a36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a38:	89fb      	ldrh	r3, [r7, #14]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a5e:	2b40      	cmp	r3, #64	@ 0x40
 8007a60:	d005      	beq.n	8007a6e <USBD_StdDevReq+0x26>
 8007a62:	2b40      	cmp	r3, #64	@ 0x40
 8007a64:	d857      	bhi.n	8007b16 <USBD_StdDevReq+0xce>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00f      	beq.n	8007a8a <USBD_StdDevReq+0x42>
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d153      	bne.n	8007b16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	32ae      	adds	r2, #174	@ 0xae
 8007a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	4798      	blx	r3
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]
      break;
 8007a88:	e04a      	b.n	8007b20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	2b09      	cmp	r3, #9
 8007a90:	d83b      	bhi.n	8007b0a <USBD_StdDevReq+0xc2>
 8007a92:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <USBD_StdDevReq+0x50>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007aed 	.word	0x08007aed
 8007a9c:	08007b01 	.word	0x08007b01
 8007aa0:	08007b0b 	.word	0x08007b0b
 8007aa4:	08007af7 	.word	0x08007af7
 8007aa8:	08007b0b 	.word	0x08007b0b
 8007aac:	08007acb 	.word	0x08007acb
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007b0b 	.word	0x08007b0b
 8007ab8:	08007ae3 	.word	0x08007ae3
 8007abc:	08007ad5 	.word	0x08007ad5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa3c 	bl	8007f40 <USBD_GetDescriptor>
          break;
 8007ac8:	e024      	b.n	8007b14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fba1 	bl	8008214 <USBD_SetAddress>
          break;
 8007ad2:	e01f      	b.n	8007b14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fbe0 	bl	800829c <USBD_SetConfig>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]
          break;
 8007ae0:	e018      	b.n	8007b14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fc83 	bl	80083f0 <USBD_GetConfig>
          break;
 8007aea:	e013      	b.n	8007b14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fcb4 	bl	800845c <USBD_GetStatus>
          break;
 8007af4:	e00e      	b.n	8007b14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fce3 	bl	80084c4 <USBD_SetFeature>
          break;
 8007afe:	e009      	b.n	8007b14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fd07 	bl	8008516 <USBD_ClrFeature>
          break;
 8007b08:	e004      	b.n	8007b14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fd5e 	bl	80085ce <USBD_CtlError>
          break;
 8007b12:	bf00      	nop
      }
      break;
 8007b14:	e004      	b.n	8007b20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fd58 	bl	80085ce <USBD_CtlError>
      break;
 8007b1e:	bf00      	nop
  }

  return ret;
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop

08007b2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b42:	2b40      	cmp	r3, #64	@ 0x40
 8007b44:	d005      	beq.n	8007b52 <USBD_StdItfReq+0x26>
 8007b46:	2b40      	cmp	r3, #64	@ 0x40
 8007b48:	d852      	bhi.n	8007bf0 <USBD_StdItfReq+0xc4>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <USBD_StdItfReq+0x26>
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d14e      	bne.n	8007bf0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d840      	bhi.n	8007be2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	889b      	ldrh	r3, [r3, #4]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d836      	bhi.n	8007bd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	889b      	ldrh	r3, [r3, #4]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff fedb 	bl	800792e <USBD_CoreFindIF>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2bff      	cmp	r3, #255	@ 0xff
 8007b80:	d01d      	beq.n	8007bbe <USBD_StdItfReq+0x92>
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d11a      	bne.n	8007bbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b88:	7bba      	ldrb	r2, [r7, #14]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32ae      	adds	r2, #174	@ 0xae
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00f      	beq.n	8007bb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b98:	7bba      	ldrb	r2, [r7, #14]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ba0:	7bba      	ldrb	r2, [r7, #14]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	32ae      	adds	r2, #174	@ 0xae
 8007ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007bb6:	e004      	b.n	8007bc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007bbc:	e001      	b.n	8007bc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	88db      	ldrh	r3, [r3, #6]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d110      	bne.n	8007bec <USBD_StdItfReq+0xc0>
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10d      	bne.n	8007bec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fdd3 	bl	800877c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bd6:	e009      	b.n	8007bec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fcf7 	bl	80085ce <USBD_CtlError>
          break;
 8007be0:	e004      	b.n	8007bec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fcf2 	bl	80085ce <USBD_CtlError>
          break;
 8007bea:	e000      	b.n	8007bee <USBD_StdItfReq+0xc2>
          break;
 8007bec:	bf00      	nop
      }
      break;
 8007bee:	e004      	b.n	8007bfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fceb 	bl	80085ce <USBD_CtlError>
      break;
 8007bf8:	bf00      	nop
  }

  return ret;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	889b      	ldrh	r3, [r3, #4]
 8007c16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c20:	2b40      	cmp	r3, #64	@ 0x40
 8007c22:	d007      	beq.n	8007c34 <USBD_StdEPReq+0x30>
 8007c24:	2b40      	cmp	r3, #64	@ 0x40
 8007c26:	f200 817f 	bhi.w	8007f28 <USBD_StdEPReq+0x324>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d02a      	beq.n	8007c84 <USBD_StdEPReq+0x80>
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	f040 817a 	bne.w	8007f28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff fe85 	bl	8007948 <USBD_CoreFindEP>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c42:	7b7b      	ldrb	r3, [r7, #13]
 8007c44:	2bff      	cmp	r3, #255	@ 0xff
 8007c46:	f000 8174 	beq.w	8007f32 <USBD_StdEPReq+0x32e>
 8007c4a:	7b7b      	ldrb	r3, [r7, #13]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 8170 	bne.w	8007f32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c52:	7b7a      	ldrb	r2, [r7, #13]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c5a:	7b7a      	ldrb	r2, [r7, #13]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	32ae      	adds	r2, #174	@ 0xae
 8007c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 8163 	beq.w	8007f32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c6c:	7b7a      	ldrb	r2, [r7, #13]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	32ae      	adds	r2, #174	@ 0xae
 8007c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c82:	e156      	b.n	8007f32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d008      	beq.n	8007c9e <USBD_StdEPReq+0x9a>
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	f300 8145 	bgt.w	8007f1c <USBD_StdEPReq+0x318>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 809b 	beq.w	8007dce <USBD_StdEPReq+0x1ca>
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d03c      	beq.n	8007d16 <USBD_StdEPReq+0x112>
 8007c9c:	e13e      	b.n	8007f1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d002      	beq.n	8007cb0 <USBD_StdEPReq+0xac>
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d016      	beq.n	8007cdc <USBD_StdEPReq+0xd8>
 8007cae:	e02c      	b.n	8007d0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00d      	beq.n	8007cd2 <USBD_StdEPReq+0xce>
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b80      	cmp	r3, #128	@ 0x80
 8007cba:	d00a      	beq.n	8007cd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7f9 fa3b 	bl	800113c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cc6:	2180      	movs	r1, #128	@ 0x80
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7f9 fa37 	bl	800113c <USBD_LL_StallEP>
 8007cce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cd0:	e020      	b.n	8007d14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fc7a 	bl	80085ce <USBD_CtlError>
              break;
 8007cda:	e01b      	b.n	8007d14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	885b      	ldrh	r3, [r3, #2]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10e      	bne.n	8007d02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00b      	beq.n	8007d02 <USBD_StdEPReq+0xfe>
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b80      	cmp	r3, #128	@ 0x80
 8007cee:	d008      	beq.n	8007d02 <USBD_StdEPReq+0xfe>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	88db      	ldrh	r3, [r3, #6]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d104      	bne.n	8007d02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7f9 fa1d 	bl	800113c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fd3a 	bl	800877c <USBD_CtlSendStatus>

              break;
 8007d08:	e004      	b.n	8007d14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fc5e 	bl	80085ce <USBD_CtlError>
              break;
 8007d12:	bf00      	nop
          }
          break;
 8007d14:	e107      	b.n	8007f26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d002      	beq.n	8007d28 <USBD_StdEPReq+0x124>
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d016      	beq.n	8007d54 <USBD_StdEPReq+0x150>
 8007d26:	e04b      	b.n	8007dc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00d      	beq.n	8007d4a <USBD_StdEPReq+0x146>
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b80      	cmp	r3, #128	@ 0x80
 8007d32:	d00a      	beq.n	8007d4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7f9 f9ff 	bl	800113c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d3e:	2180      	movs	r1, #128	@ 0x80
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7f9 f9fb 	bl	800113c <USBD_LL_StallEP>
 8007d46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d48:	e040      	b.n	8007dcc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fc3e 	bl	80085ce <USBD_CtlError>
              break;
 8007d52:	e03b      	b.n	8007dcc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	885b      	ldrh	r3, [r3, #2]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d136      	bne.n	8007dca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7f9 fa05 	bl	800117a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fd03 	bl	800877c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fde4 	bl	8007948 <USBD_CoreFindEP>
 8007d80:	4603      	mov	r3, r0
 8007d82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d84:	7b7b      	ldrb	r3, [r7, #13]
 8007d86:	2bff      	cmp	r3, #255	@ 0xff
 8007d88:	d01f      	beq.n	8007dca <USBD_StdEPReq+0x1c6>
 8007d8a:	7b7b      	ldrb	r3, [r7, #13]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d11c      	bne.n	8007dca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d90:	7b7a      	ldrb	r2, [r7, #13]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d98:	7b7a      	ldrb	r2, [r7, #13]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32ae      	adds	r2, #174	@ 0xae
 8007d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d010      	beq.n	8007dca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007da8:	7b7a      	ldrb	r2, [r7, #13]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	32ae      	adds	r2, #174	@ 0xae
 8007dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007dbe:	e004      	b.n	8007dca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fc03 	bl	80085ce <USBD_CtlError>
              break;
 8007dc8:	e000      	b.n	8007dcc <USBD_StdEPReq+0x1c8>
              break;
 8007dca:	bf00      	nop
          }
          break;
 8007dcc:	e0ab      	b.n	8007f26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d002      	beq.n	8007de0 <USBD_StdEPReq+0x1dc>
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d032      	beq.n	8007e44 <USBD_StdEPReq+0x240>
 8007dde:	e097      	b.n	8007f10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <USBD_StdEPReq+0x1f2>
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b80      	cmp	r3, #128	@ 0x80
 8007dea:	d004      	beq.n	8007df6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fbed 	bl	80085ce <USBD_CtlError>
                break;
 8007df4:	e091      	b.n	8007f1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007df6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da0b      	bge.n	8007e16 <USBD_StdEPReq+0x212>
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	3310      	adds	r3, #16
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	4413      	add	r3, r2
 8007e12:	3304      	adds	r3, #4
 8007e14:	e00b      	b.n	8007e2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc43 	bl	80086c8 <USBD_CtlSendData>
              break;
 8007e42:	e06a      	b.n	8007f1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	da11      	bge.n	8007e70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	f003 020f 	and.w	r2, r3, #15
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	440b      	add	r3, r1
 8007e5e:	3324      	adds	r3, #36	@ 0x24
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d117      	bne.n	8007e96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fbb0 	bl	80085ce <USBD_CtlError>
                  break;
 8007e6e:	e054      	b.n	8007f1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	f003 020f 	and.w	r2, r3, #15
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	440b      	add	r3, r1
 8007e82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d104      	bne.n	8007e96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fb9d 	bl	80085ce <USBD_CtlError>
                  break;
 8007e94:	e041      	b.n	8007f1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da0b      	bge.n	8007eb6 <USBD_StdEPReq+0x2b2>
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	3310      	adds	r3, #16
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	e00b      	b.n	8007ece <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	4413      	add	r3, r2
 8007ecc:	3304      	adds	r3, #4
 8007ece:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <USBD_StdEPReq+0x2d8>
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	2b80      	cmp	r3, #128	@ 0x80
 8007eda:	d103      	bne.n	8007ee4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e00e      	b.n	8007f02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7f9 f965 	bl	80011b8 <USBD_LL_IsStallEP>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	e002      	b.n	8007f02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2202      	movs	r2, #2
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fbdd 	bl	80086c8 <USBD_CtlSendData>
              break;
 8007f0e:	e004      	b.n	8007f1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fb5b 	bl	80085ce <USBD_CtlError>
              break;
 8007f18:	bf00      	nop
          }
          break;
 8007f1a:	e004      	b.n	8007f26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fb55 	bl	80085ce <USBD_CtlError>
          break;
 8007f24:	bf00      	nop
      }
      break;
 8007f26:	e005      	b.n	8007f34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fb4f 	bl	80085ce <USBD_CtlError>
      break;
 8007f30:	e000      	b.n	8007f34 <USBD_StdEPReq+0x330>
      break;
 8007f32:	bf00      	nop
  }

  return ret;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	885b      	ldrh	r3, [r3, #2]
 8007f5a:	0a1b      	lsrs	r3, r3, #8
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b06      	cmp	r3, #6
 8007f62:	f200 8128 	bhi.w	80081b6 <USBD_GetDescriptor+0x276>
 8007f66:	a201      	add	r2, pc, #4	@ (adr r2, 8007f6c <USBD_GetDescriptor+0x2c>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	08007fa1 	.word	0x08007fa1
 8007f74:	08007fe1 	.word	0x08007fe1
 8007f78:	080081b7 	.word	0x080081b7
 8007f7c:	080081b7 	.word	0x080081b7
 8007f80:	08008157 	.word	0x08008157
 8007f84:	08008183 	.word	0x08008183
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	7c12      	ldrb	r2, [r2, #16]
 8007f94:	f107 0108 	add.w	r1, r7, #8
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4798      	blx	r3
 8007f9c:	60f8      	str	r0, [r7, #12]
      break;
 8007f9e:	e112      	b.n	80081c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	7c1b      	ldrb	r3, [r3, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10d      	bne.n	8007fc4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb0:	f107 0208 	add.w	r2, r7, #8
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4798      	blx	r3
 8007fb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fc2:	e100      	b.n	80081c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	f107 0208 	add.w	r2, r7, #8
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4798      	blx	r3
 8007fd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	2202      	movs	r2, #2
 8007fdc:	701a      	strb	r2, [r3, #0]
      break;
 8007fde:	e0f2      	b.n	80081c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	885b      	ldrh	r3, [r3, #2]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b05      	cmp	r3, #5
 8007fe8:	f200 80ac 	bhi.w	8008144 <USBD_GetDescriptor+0x204>
 8007fec:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff4 <USBD_GetDescriptor+0xb4>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	0800800d 	.word	0x0800800d
 8007ff8:	08008041 	.word	0x08008041
 8007ffc:	08008075 	.word	0x08008075
 8008000:	080080a9 	.word	0x080080a9
 8008004:	080080dd 	.word	0x080080dd
 8008008:	08008111 	.word	0x08008111
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	7c12      	ldrb	r2, [r2, #16]
 8008024:	f107 0108 	add.w	r1, r7, #8
 8008028:	4610      	mov	r0, r2
 800802a:	4798      	blx	r3
 800802c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800802e:	e091      	b.n	8008154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 facb 	bl	80085ce <USBD_CtlError>
            err++;
 8008038:	7afb      	ldrb	r3, [r7, #11]
 800803a:	3301      	adds	r3, #1
 800803c:	72fb      	strb	r3, [r7, #11]
          break;
 800803e:	e089      	b.n	8008154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	7c12      	ldrb	r2, [r2, #16]
 8008058:	f107 0108 	add.w	r1, r7, #8
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008062:	e077      	b.n	8008154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fab1 	bl	80085ce <USBD_CtlError>
            err++;
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	3301      	adds	r3, #1
 8008070:	72fb      	strb	r3, [r7, #11]
          break;
 8008072:	e06f      	b.n	8008154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	7c12      	ldrb	r2, [r2, #16]
 800808c:	f107 0108 	add.w	r1, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008096:	e05d      	b.n	8008154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa97 	bl	80085ce <USBD_CtlError>
            err++;
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	3301      	adds	r3, #1
 80080a4:	72fb      	strb	r3, [r7, #11]
          break;
 80080a6:	e055      	b.n	8008154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	7c12      	ldrb	r2, [r2, #16]
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ca:	e043      	b.n	8008154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa7d 	bl	80085ce <USBD_CtlError>
            err++;
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	3301      	adds	r3, #1
 80080d8:	72fb      	strb	r3, [r7, #11]
          break;
 80080da:	e03b      	b.n	8008154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	7c12      	ldrb	r2, [r2, #16]
 80080f4:	f107 0108 	add.w	r1, r7, #8
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080fe:	e029      	b.n	8008154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa63 	bl	80085ce <USBD_CtlError>
            err++;
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	3301      	adds	r3, #1
 800810c:	72fb      	strb	r3, [r7, #11]
          break;
 800810e:	e021      	b.n	8008154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00b      	beq.n	8008134 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	7c12      	ldrb	r2, [r2, #16]
 8008128:	f107 0108 	add.w	r1, r7, #8
 800812c:	4610      	mov	r0, r2
 800812e:	4798      	blx	r3
 8008130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008132:	e00f      	b.n	8008154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa49 	bl	80085ce <USBD_CtlError>
            err++;
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	3301      	adds	r3, #1
 8008140:	72fb      	strb	r3, [r7, #11]
          break;
 8008142:	e007      	b.n	8008154 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa41 	bl	80085ce <USBD_CtlError>
          err++;
 800814c:	7afb      	ldrb	r3, [r7, #11]
 800814e:	3301      	adds	r3, #1
 8008150:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008152:	bf00      	nop
      }
      break;
 8008154:	e037      	b.n	80081c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	7c1b      	ldrb	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008166:	f107 0208 	add.w	r2, r7, #8
 800816a:	4610      	mov	r0, r2
 800816c:	4798      	blx	r3
 800816e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008170:	e029      	b.n	80081c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fa2a 	bl	80085ce <USBD_CtlError>
        err++;
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	3301      	adds	r3, #1
 800817e:	72fb      	strb	r3, [r7, #11]
      break;
 8008180:	e021      	b.n	80081c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	7c1b      	ldrb	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10d      	bne.n	80081a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008192:	f107 0208 	add.w	r2, r7, #8
 8008196:	4610      	mov	r0, r2
 8008198:	4798      	blx	r3
 800819a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3301      	adds	r3, #1
 80081a0:	2207      	movs	r2, #7
 80081a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081a4:	e00f      	b.n	80081c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fa10 	bl	80085ce <USBD_CtlError>
        err++;
 80081ae:	7afb      	ldrb	r3, [r7, #11]
 80081b0:	3301      	adds	r3, #1
 80081b2:	72fb      	strb	r3, [r7, #11]
      break;
 80081b4:	e007      	b.n	80081c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fa08 	bl	80085ce <USBD_CtlError>
      err++;
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	3301      	adds	r3, #1
 80081c2:	72fb      	strb	r3, [r7, #11]
      break;
 80081c4:	bf00      	nop
  }

  if (err != 0U)
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11e      	bne.n	800820a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	88db      	ldrh	r3, [r3, #6]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d016      	beq.n	8008202 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80081d4:	893b      	ldrh	r3, [r7, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	88da      	ldrh	r2, [r3, #6]
 80081de:	893b      	ldrh	r3, [r7, #8]
 80081e0:	4293      	cmp	r3, r2
 80081e2:	bf28      	it	cs
 80081e4:	4613      	movcs	r3, r2
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081ea:	893b      	ldrh	r3, [r7, #8]
 80081ec:	461a      	mov	r2, r3
 80081ee:	68f9      	ldr	r1, [r7, #12]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fa69 	bl	80086c8 <USBD_CtlSendData>
 80081f6:	e009      	b.n	800820c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f9e7 	bl	80085ce <USBD_CtlError>
 8008200:	e004      	b.n	800820c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 faba 	bl	800877c <USBD_CtlSendStatus>
 8008208:	e000      	b.n	800820c <USBD_GetDescriptor+0x2cc>
    return;
 800820a:	bf00      	nop
  }
}
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop

08008214 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	889b      	ldrh	r3, [r3, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d131      	bne.n	800828a <USBD_SetAddress+0x76>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	88db      	ldrh	r3, [r3, #6]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d12d      	bne.n	800828a <USBD_SetAddress+0x76>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	885b      	ldrh	r3, [r3, #2]
 8008232:	2b7f      	cmp	r3, #127	@ 0x7f
 8008234:	d829      	bhi.n	800828a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	885b      	ldrh	r3, [r3, #2]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008240:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b03      	cmp	r3, #3
 800824c:	d104      	bne.n	8008258 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f9bc 	bl	80085ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008256:	e01d      	b.n	8008294 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	7bfa      	ldrb	r2, [r7, #15]
 800825c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7f8 ffd3 	bl	8001210 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa86 	bl	800877c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827e:	e009      	b.n	8008294 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008288:	e004      	b.n	8008294 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f99e 	bl	80085ce <USBD_CtlError>
  }
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	885b      	ldrh	r3, [r3, #2]
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	4b4e      	ldr	r3, [pc, #312]	@ (80083ec <USBD_SetConfig+0x150>)
 80082b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082b4:	4b4d      	ldr	r3, [pc, #308]	@ (80083ec <USBD_SetConfig+0x150>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d905      	bls.n	80082c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f985 	bl	80085ce <USBD_CtlError>
    return USBD_FAIL;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e08c      	b.n	80083e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d002      	beq.n	80082da <USBD_SetConfig+0x3e>
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d029      	beq.n	800832c <USBD_SetConfig+0x90>
 80082d8:	e075      	b.n	80083c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082da:	4b44      	ldr	r3, [pc, #272]	@ (80083ec <USBD_SetConfig+0x150>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d020      	beq.n	8008324 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082e2:	4b42      	ldr	r3, [pc, #264]	@ (80083ec <USBD_SetConfig+0x150>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082ec:	4b3f      	ldr	r3, [pc, #252]	@ (80083ec <USBD_SetConfig+0x150>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fe ffe3 	bl	80072be <USBD_SetClassConfig>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d008      	beq.n	8008314 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f962 	bl	80085ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008312:	e065      	b.n	80083e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fa31 	bl	800877c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2203      	movs	r2, #3
 800831e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008322:	e05d      	b.n	80083e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fa29 	bl	800877c <USBD_CtlSendStatus>
      break;
 800832a:	e059      	b.n	80083e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800832c:	4b2f      	ldr	r3, [pc, #188]	@ (80083ec <USBD_SetConfig+0x150>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d112      	bne.n	800835a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800833c:	4b2b      	ldr	r3, [pc, #172]	@ (80083ec <USBD_SetConfig+0x150>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008346:	4b29      	ldr	r3, [pc, #164]	@ (80083ec <USBD_SetConfig+0x150>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7fe ffd2 	bl	80072f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa12 	bl	800877c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008358:	e042      	b.n	80083e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800835a:	4b24      	ldr	r3, [pc, #144]	@ (80083ec <USBD_SetConfig+0x150>)
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	429a      	cmp	r2, r3
 8008366:	d02a      	beq.n	80083be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7fe ffc0 	bl	80072f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008376:	4b1d      	ldr	r3, [pc, #116]	@ (80083ec <USBD_SetConfig+0x150>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008380:	4b1a      	ldr	r3, [pc, #104]	@ (80083ec <USBD_SetConfig+0x150>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7fe ff99 	bl	80072be <USBD_SetClassConfig>
 800838c:	4603      	mov	r3, r0
 800838e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f918 	bl	80085ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7fe ffa5 	bl	80072f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083b4:	e014      	b.n	80083e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9e0 	bl	800877c <USBD_CtlSendStatus>
      break;
 80083bc:	e010      	b.n	80083e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f9dc 	bl	800877c <USBD_CtlSendStatus>
      break;
 80083c4:	e00c      	b.n	80083e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f900 	bl	80085ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083ce:	4b07      	ldr	r3, [pc, #28]	@ (80083ec <USBD_SetConfig+0x150>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7fe ff8e 	bl	80072f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083da:	2303      	movs	r3, #3
 80083dc:	73fb      	strb	r3, [r7, #15]
      break;
 80083de:	bf00      	nop
  }

  return ret;
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20001dd8 	.word	0x20001dd8

080083f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	88db      	ldrh	r3, [r3, #6]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d004      	beq.n	800840c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f8e2 	bl	80085ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800840a:	e023      	b.n	8008454 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	dc02      	bgt.n	800841e <USBD_GetConfig+0x2e>
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc03      	bgt.n	8008424 <USBD_GetConfig+0x34>
 800841c:	e015      	b.n	800844a <USBD_GetConfig+0x5a>
 800841e:	2b03      	cmp	r3, #3
 8008420:	d00b      	beq.n	800843a <USBD_GetConfig+0x4a>
 8008422:	e012      	b.n	800844a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3308      	adds	r3, #8
 800842e:	2201      	movs	r2, #1
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f948 	bl	80086c8 <USBD_CtlSendData>
        break;
 8008438:	e00c      	b.n	8008454 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	2201      	movs	r2, #1
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f940 	bl	80086c8 <USBD_CtlSendData>
        break;
 8008448:	e004      	b.n	8008454 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f8be 	bl	80085ce <USBD_CtlError>
        break;
 8008452:	bf00      	nop
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800846c:	b2db      	uxtb	r3, r3
 800846e:	3b01      	subs	r3, #1
 8008470:	2b02      	cmp	r3, #2
 8008472:	d81e      	bhi.n	80084b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	88db      	ldrh	r3, [r3, #6]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d004      	beq.n	8008486 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f8a5 	bl	80085ce <USBD_CtlError>
        break;
 8008484:	e01a      	b.n	80084bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f043 0202 	orr.w	r2, r3, #2
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	330c      	adds	r3, #12
 80084a6:	2202      	movs	r2, #2
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f90c 	bl	80086c8 <USBD_CtlSendData>
      break;
 80084b0:	e004      	b.n	80084bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f88a 	bl	80085ce <USBD_CtlError>
      break;
 80084ba:	bf00      	nop
  }
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d107      	bne.n	80084e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f94c 	bl	800877c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084e4:	e013      	b.n	800850e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	885b      	ldrh	r3, [r3, #2]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d10b      	bne.n	8008506 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	889b      	ldrh	r3, [r3, #4]
 80084f2:	0a1b      	lsrs	r3, r3, #8
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f93c 	bl	800877c <USBD_CtlSendStatus>
}
 8008504:	e003      	b.n	800850e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f860 	bl	80085ce <USBD_CtlError>
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008526:	b2db      	uxtb	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	2b02      	cmp	r3, #2
 800852c:	d80b      	bhi.n	8008546 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d10c      	bne.n	8008550 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f91c 	bl	800877c <USBD_CtlSendStatus>
      }
      break;
 8008544:	e004      	b.n	8008550 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f840 	bl	80085ce <USBD_CtlError>
      break;
 800854e:	e000      	b.n	8008552 <USBD_ClrFeature+0x3c>
      break;
 8008550:	bf00      	nop
  }
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3301      	adds	r3, #1
 8008574:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	781a      	ldrb	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff fa40 	bl	8007a0a <SWAPBYTE>
 800858a:	4603      	mov	r3, r0
 800858c:	461a      	mov	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3301      	adds	r3, #1
 8008596:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3301      	adds	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff fa33 	bl	8007a0a <SWAPBYTE>
 80085a4:	4603      	mov	r3, r0
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3301      	adds	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff fa26 	bl	8007a0a <SWAPBYTE>
 80085be:	4603      	mov	r3, r0
 80085c0:	461a      	mov	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	80da      	strh	r2, [r3, #6]
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085d8:	2180      	movs	r1, #128	@ 0x80
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 fdae 	bl	800113c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7f8 fdaa 	bl	800113c <USBD_LL_StallEP>
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d042      	beq.n	800868c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f000 f842 	bl	8008694 <USBD_GetLen>
 8008610:	4603      	mov	r3, r0
 8008612:	3301      	adds	r3, #1
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800861a:	d808      	bhi.n	800862e <USBD_GetString+0x3e>
 800861c:	6938      	ldr	r0, [r7, #16]
 800861e:	f000 f839 	bl	8008694 <USBD_GetLen>
 8008622:	4603      	mov	r3, r0
 8008624:	3301      	adds	r3, #1
 8008626:	b29b      	uxth	r3, r3
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	b29a      	uxth	r2, r3
 800862c:	e001      	b.n	8008632 <USBD_GetString+0x42>
 800862e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	4413      	add	r3, r2
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	7812      	ldrb	r2, [r2, #0]
 8008640:	701a      	strb	r2, [r3, #0]
  idx++;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	3301      	adds	r3, #1
 8008646:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	2203      	movs	r2, #3
 8008650:	701a      	strb	r2, [r3, #0]
  idx++;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	3301      	adds	r3, #1
 8008656:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008658:	e013      	b.n	8008682 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	4413      	add	r3, r2
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	7812      	ldrb	r2, [r2, #0]
 8008664:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	3301      	adds	r3, #1
 800866a:	613b      	str	r3, [r7, #16]
    idx++;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	3301      	adds	r3, #1
 8008670:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	4413      	add	r3, r2
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]
    idx++;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	3301      	adds	r3, #1
 8008680:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e7      	bne.n	800865a <USBD_GetString+0x6a>
 800868a:	e000      	b.n	800868e <USBD_GetString+0x9e>
    return;
 800868c:	bf00      	nop
  }
}
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80086a4:	e005      	b.n	80086b2 <USBD_GetLen+0x1e>
  {
    len++;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	3301      	adds	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3301      	adds	r3, #1
 80086b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f5      	bne.n	80086a6 <USBD_GetLen+0x12>
  }

  return len;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	2100      	movs	r1, #0
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7f8 fdad 	bl	800124e <USBD_LL_Transmit>

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	2100      	movs	r1, #0
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7f8 fd9c 	bl	800124e <USBD_LL_Transmit>

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2203      	movs	r2, #3
 8008730:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	2100      	movs	r1, #0
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7f8 fda0 	bl	8001290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	2100      	movs	r1, #0
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7f8 fd8f 	bl	8001290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2204      	movs	r2, #4
 8008788:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800878c:	2300      	movs	r3, #0
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7f8 fd5b 	bl	800124e <USBD_LL_Transmit>

  return USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2205      	movs	r2, #5
 80087ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087b2:	2300      	movs	r3, #0
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7f8 fd69 	bl	8001290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <memset>:
 80087c8:	4402      	add	r2, r0
 80087ca:	4603      	mov	r3, r0
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d100      	bne.n	80087d2 <memset+0xa>
 80087d0:	4770      	bx	lr
 80087d2:	f803 1b01 	strb.w	r1, [r3], #1
 80087d6:	e7f9      	b.n	80087cc <memset+0x4>

080087d8 <strncmp>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	b16a      	cbz	r2, 80087f8 <strncmp+0x20>
 80087dc:	3901      	subs	r1, #1
 80087de:	1884      	adds	r4, r0, r2
 80087e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d103      	bne.n	80087f4 <strncmp+0x1c>
 80087ec:	42a0      	cmp	r0, r4
 80087ee:	d001      	beq.n	80087f4 <strncmp+0x1c>
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	d1f5      	bne.n	80087e0 <strncmp+0x8>
 80087f4:	1ad0      	subs	r0, r2, r3
 80087f6:	bd10      	pop	{r4, pc}
 80087f8:	4610      	mov	r0, r2
 80087fa:	e7fc      	b.n	80087f6 <strncmp+0x1e>

080087fc <__libc_init_array>:
 80087fc:	b570      	push	{r4, r5, r6, lr}
 80087fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008834 <__libc_init_array+0x38>)
 8008800:	4c0d      	ldr	r4, [pc, #52]	@ (8008838 <__libc_init_array+0x3c>)
 8008802:	1b64      	subs	r4, r4, r5
 8008804:	10a4      	asrs	r4, r4, #2
 8008806:	2600      	movs	r6, #0
 8008808:	42a6      	cmp	r6, r4
 800880a:	d109      	bne.n	8008820 <__libc_init_array+0x24>
 800880c:	4d0b      	ldr	r5, [pc, #44]	@ (800883c <__libc_init_array+0x40>)
 800880e:	4c0c      	ldr	r4, [pc, #48]	@ (8008840 <__libc_init_array+0x44>)
 8008810:	f000 f818 	bl	8008844 <_init>
 8008814:	1b64      	subs	r4, r4, r5
 8008816:	10a4      	asrs	r4, r4, #2
 8008818:	2600      	movs	r6, #0
 800881a:	42a6      	cmp	r6, r4
 800881c:	d105      	bne.n	800882a <__libc_init_array+0x2e>
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f855 3b04 	ldr.w	r3, [r5], #4
 8008824:	4798      	blx	r3
 8008826:	3601      	adds	r6, #1
 8008828:	e7ee      	b.n	8008808 <__libc_init_array+0xc>
 800882a:	f855 3b04 	ldr.w	r3, [r5], #4
 800882e:	4798      	blx	r3
 8008830:	3601      	adds	r6, #1
 8008832:	e7f2      	b.n	800881a <__libc_init_array+0x1e>
 8008834:	080088cc 	.word	0x080088cc
 8008838:	080088cc 	.word	0x080088cc
 800883c:	080088cc 	.word	0x080088cc
 8008840:	080088d0 	.word	0x080088d0

08008844 <_init>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr

08008850 <_fini>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr
